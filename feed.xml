<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://notfiles.xyz/feed.xml" rel="self" type="application/atom+xml" /><link href="https://notfiles.xyz/" rel="alternate" type="text/html" /><updated>2024-01-03T01:00:51+01:00</updated><id>https://notfiles.xyz/feed.xml</id><title type="html">not://files v3.0</title><subtitle>Random development ramblings, maybe.
</subtitle><author><name>notcalle</name></author><entry><title type="html">Ruby Raytracer on M2 Max</title><link href="https://notfiles.xyz/2024/01/02/ruby-raytracer-on-mac-studio-m2/" rel="alternate" type="text/html" title="Ruby Raytracer on M2 Max" /><published>2024-01-02T22:48:00+01:00</published><updated>2024-01-02T22:48:00+01:00</updated><id>https://notfiles.xyz/2024/01/02/ruby-raytracer-on-mac-studio-m2</id><content type="html" xml:base="https://notfiles.xyz/2024/01/02/ruby-raytracer-on-mac-studio-m2/"><![CDATA[<p>A few years — and iterations of the <em>Apple M-series</em> — has passed, and I recently found myself in possession of a <em>Mac Studio M2</em>, in its base configuration of <em>8P + 4E</em> CPU cores, and even more ridiculous<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> amounts of cache.</p>

<p>But the burning question is, does it deliver on the promise of up to 18% CPU speed improvement?</p>

<h3 id="hard-shadows">Hard shadows</h3>

<p>The base-line benchmark, as before, is the single-threaded render without any fancy rendering techniques active</p>

<h6 id="mac-studio-m2-2023">Mac Studio M2 (2023)</h6>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[1] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span>
<span class="go"> Setup time: 0.178938 s
Render time: 104.306864 s
 Total time: 104.485802 s
</span></code></pre></div></div>

<p>That’s a 17% improvement in single-core performance over the M1, so right on the spot.</p>

<h6 id="macbook-pro-m1-2021">MacBook Pro M1 (2021)</h6>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[1] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span>
<span class="go"> Setup time: 0.240659 s
Render time: 122.153057 s
 Total time: 122.393716 s
</span></code></pre></div></div>

<p>Then we get into the unfair territory, because the M1 did the multi-threaded benchmark using all its P-, and E-cores, where the M2 Max can let its P-cores do all the work.</p>

<h6 id="mac-studio-m2-2023-1">Mac Studio M2 (2023)</h6>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[1] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span><span class="p">,</span> <span class="n">threads</span><span class="p">:</span><span class="mi">8</span>
<span class="go"> Setup time: 0.173121 s
Render time: 15.689671 s
 Total time: 15.862792 s
</span></code></pre></div></div>

<p><strong>BOOM</strong> even lightning faster — over six and a half times as fast multi-threaded, and almost twice (1.79x) as fast as the M1 was.</p>

<h6 id="macbook-pro-m1-2021-1">MacBook Pro M1 (2021)</h6>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[2] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span><span class="p">,</span> <span class="n">threads</span><span class="p">:</span><span class="mi">8</span>
<span class="go"> Setup time: 0.266847 s
Render time: 28.061283 s
 Total time: 28.32813 s
</span></code></pre></div></div>

<h3 id="going-all-in--soft-shadows-and-anti-aliasing">Going All In — Soft Shadows and Anti-Aliasing</h3>

<p>This time, we’re throwing everything we have, letting the tiny E-cores do what they can to help along.</p>

<h6 id="mac-studio-m2-2023-2">Mac Studio M2 (2023)</h6>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[1] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span><span class="p">,</span> <span class="n">threads</span><span class="p">:</span><span class="mi">12</span><span class="p">,</span> <span class="n">ssaa</span><span class="p">:</span><span class="mi">3</span>
<span class="go"> Setup time: 0.17466 s
Render time: 304.752032 s
 Total time: 304.926692 s
</span></code></pre></div></div>

<p>Just shy of twice (1.97x) the crunch of an M1, in the extremely unfair final round.</p>

<h6 id="macbook-pro-m1-2021-2">MacBook Pro M1 (2021)</h6>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[1] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span><span class="p">,</span> <span class="n">threads</span><span class="p">:</span><span class="mi">8</span><span class="p">,</span> <span class="n">ssaa</span><span class="p">:</span><span class="mi">3</span>
<span class="go"> Setup time: 0.23379 s
Render time: 601.335931 s
 Total time: 601.569721 s
</span></code></pre></div></div>

<p>Still, this is an extremely inefficient raytracer, and nothing we can throw at it will make renders reasonable. All the benchmarks yield a 320x256 image, which of course is the standard Amiga PAL low-res, and would take days to run with an optimized raytracer on an actual Amiga.</p>

<p>Which raises the next question, is it more efficient to emulate an Amiga, running an optimized raytracer, than this nonsense one I made in Ruby?</p>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>This monster has 87 MiB L1+L2+L3 cache in total. <em>It can fit my entire first hard-drive (52 MB) in CPU cache.</em> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#x21a9;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Calle Englund</name></author><category term="discord" /><category term="raytracerchallenge" /><category term="raytracing" /><category term="ruby" /><summary type="html"><![CDATA[A few years — and iterations of the Apple M-series — has passed, and I recently found myself in possession of a Mac Studio M2, in its base configuration of 8P + 4E CPU cores, and even more ridiculous1 amounts of cache. This monster has 87 MiB L1+L2+L3 cache in total. It can fit my entire first hard-drive (52 MB) in CPU cache. &#x21a9;]]></summary></entry><entry><title type="html">RasPi 400 bonus benchmarks</title><link href="https://notfiles.xyz/2022/05/12/rpi-400-bonus-benchmarks/" rel="alternate" type="text/html" title="RasPi 400 bonus benchmarks" /><published>2022-05-12T20:34:00+02:00</published><updated>2022-05-12T20:34:00+02:00</updated><id>https://notfiles.xyz/2022/05/12/rpi-400-bonus-benchmarks</id><content type="html" xml:base="https://notfiles.xyz/2022/05/12/rpi-400-bonus-benchmarks/"><![CDATA[<p>I didn’t quite finish the bonus benchmarks, so for the sake of completeness,
here we go. The missing ones for the <em>RasPi 400</em>.</p>

<h3 id="hard-shadows">Hard shadows</h3>

<p>The Raspi only got a chance to show off with the heaviest of the benchmarks,
so let’s see how it does in the lower end of teapot image quality.</p>

<h6 id="raspberry-pi-400-oc-22ghz-single-threaded">Raspberry Pi 400 OC 2.2GHz (single threaded)</h6>

<p>Single threaded performance still tracks at about the same ratio of <em>1/9 M1</em>.</p>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[1] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span>
<span class="go"> Setup time: 1.375927773 s
Render time: 852.156157512 s
 Total time: 853.532085285 s
</span></code></pre></div></div>

<h6 id="raspberry-pi-400-oc-22ghz-multi-threaded">Raspberry Pi 400 OC 2.2GHz (multi-threaded)</h6>

<p>This one would seem a bit unfair, because the <em>RasPi 400</em> only gets 4 threads
to do the work, instead of 8 threads for the other ones.</p>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[2] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span><span class="p">,</span> <span class="n">threads</span><span class="p">:</span><span class="mi">4</span>
<span class="go"> Setup time: 1.379623305 s
Render time: 292.012566677 s
 Total time: 293.392189982 s
</span></code></pre></div></div>

<p>The huge falloff in performance for those last 4 threads shows pretty clearly
here. The <em>RasPi 400</em> performance/thread scales pretty well at <em>3/4</em>, given
the huge overhead of the threaded renderer, but the <em>M1</em> only did <em>4/8</em>, and
the <em>i7</em> was even worse with <em>3/8</em>.</p>

<p>Still, <em>4x M1</em> is more than <em>3x RasPi 400</em>, so the total
performance ratio when using every single bit of crunch there is, is less
than <em>1/10 M1</em>.</p>

<p>More interesting is that the <em>RasPi 400</em> did the soft-shadows render at only
<em>19x</em> the time for hard-shadows, but the <em>M1</em> took more than <em>21x</em> the
time. The passive thermal design of the <em>RasPi 400</em> continues to amaze me,
especially given the long history of overheated pies.</p>]]></content><author><name>Calle Englund</name></author><category term="discord" /><category term="raytracerchallenge" /><category term="raytracing" /><category term="ruby" /><summary type="html"><![CDATA[I didn’t quite finish the bonus benchmarks, so for the sake of completeness, here we go. The missing ones for the RasPi 400.]]></summary></entry><entry><title type="html">Ruby raytracer on M1</title><link href="https://notfiles.xyz/2022/05/11/ruby-raytracer-on-m1/" rel="alternate" type="text/html" title="Ruby raytracer on M1" /><published>2022-05-11T22:52:00+02:00</published><updated>2022-05-11T22:52:00+02:00</updated><id>https://notfiles.xyz/2022/05/11/ruby-raytracer-on-m1</id><content type="html" xml:base="https://notfiles.xyz/2022/05/11/ruby-raytracer-on-m1/"><![CDATA[<p>While doing something else than I was planning to, I accedentally came back to
the raytracer I once wrote in Ruby, and decided that the important thing just
now is to benchmark my <em>MacBook Pro M1</em> against those old results. I guess
this will actually be <em>Ruby 3 on M1</em> vs <em>Ruby 2 on i7</em>, because time happened.</p>

<h3 id="single-threaded">Single-threaded</h3>

<p>Starting out with the single threaded teapot rendering benchmark. This should
give a pretty good measure of raw performance.</p>

<h6 id="macbook-pro-m1-2021">MacBook Pro M1 (2021)</h6>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[1] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span>
<span class="go"> Setup time: 0.272459 s
Render time: 354.255657 s
 Total time: 354.528116 s
</span></code></pre></div></div>

<h6 id="imac-i7-2012">iMac i7 (2012)</h6>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[1] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span>
<span class="go"> Setup time: 0.532384 s
Render time: 259.392946 s
 Total time: 259.92533 s
</span></code></pre></div></div>

<p>But wait? Setup time is twice as fast, but rendering is 30% slower? To quote
Arueshalae, <em>something is not right here.</em></p>

<h3 id="multi-threaded">Multi-threaded</h3>

<p>This the one that made the i7 melt, without providing much more pixels per
second than at half the threads. Let’s see how the M1 fares here. Both have
about the same capacity of maximum performance threads, and the same total
level of parallelism. <em>4C + 4c</em> vs <em>4C * 2T</em>.</p>

<h6 id="macbook-pro-m1-2021-1">MacBook Pro M1 (2021)</h6>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[2] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span><span class="p">,</span> <span class="n">threads</span><span class="p">:</span><span class="mi">8</span>
<span class="go"> Setup time: 0.261933 s
Render time: 70.432901 s
 Total time: 70.694834 s
</span></code></pre></div></div>

<p>So, render time is about 1/5 of single-threaded. With the highly suboptimal
implementation, I guess this is about as good as can be expected. I think this
was the first time I could actually hear the CPU fan, in the year I’ve had
this machine.</p>

<h6 id="imac-i7-2012-1">iMac i7 (2012)</h6>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[3] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span><span class="p">,</span> <span class="n">threads</span><span class="p">:</span><span class="mi">8</span>
<span class="go"> Setup time: 0.560456 s
Render time: 77.613168 s
 Total time: 78.173624 s
</span></code></pre></div></div>

<p>Now we’re suddenly doing better than the i7, but that might be due to
thermal throttling? Could also be that the “efficiency” cores add more crunch
to the mix than the hyperthreads did.</p>

<p>Still, the setup — <a href="/2018/12/31/day-31-optimizing-triangles/">building the Kd-tree</a> — is twice as fast. This does not add up.</p>

<h3 id="face-palm">Face palm</h3>

<p>Those earlier benchmarks were run after all the primary optimizations had been
made, but before all the extra — performance draining — render quality
features were added.</p>

<p>Like soft shadows.</p>

<p>All. Those. Shadow. Rays. The Shadow? <strong>The Shadow!</strong> Rays!</p>

<p>Easily fixed, just adjust the spherical light source to point size, and all
those extra shadow rays goes away.</p>

<h3 id="hard-shadows">Hard shadows</h3>

<p>There we go; twice as fast single-threaded rendering.</p>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[1] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span>
<span class="go"> Setup time: 0.240659 s
Render time: 122.153057 s
 Total time: 122.393716 s
</span></code></pre></div></div>

<p><strong>BOOM</strong> lightning fast — almost thrice as fast multi-threaded</p>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[2] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span><span class="p">,</span> <span class="n">threads</span><span class="p">:</span><span class="mi">8</span>
<span class="go"> Setup time: 0.266847 s
Render time: 28.061283 s
 Total time: 28.32813 s
</span></code></pre></div></div>

<p>Mystery solved, but where’s the fun in stopping now?</p>

<h3 id="going-all-in--soft-shadows-and-anti-aliasing">Going All In — Soft Shadows and Anti-Aliasing</h3>

<p>The <a href="/2019/01/29/soft-shadows/">final original benchmark</a> was rendering soft shadows with velvet smooth
anti-aliasing, so let’s do that too, while we’re here.</p>

<h6 id="macbook-pro-m1-2021-2">MacBook Pro M1 (2021)</h6>

<p>This time we might have hit the thermal throttling of the M1 as well, because
the CPU fan is wheezing increasingly louder, and the hand rest is getting warm
and toasty like you’d want when coming home on a cold winter night.</p>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[1] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span><span class="p">,</span> <span class="n">threads</span><span class="p">:</span><span class="mi">8</span><span class="p">,</span> <span class="n">ssaa</span><span class="p">:</span><span class="mi">3</span>
<span class="go"> Setup time: 0.23379 s
Render time: 601.335931 s
 Total time: 601.569721 s
</span></code></pre></div></div>

<h6 id="imac-i7-2012-2">iMac i7 (2012)</h6>

<p>This time we’re only 2 1/2 times as fast on the M1, and by the sound and feel
of it, thermal throttling is very much in effect.</p>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[1] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span><span class="p">,</span> <span class="n">threads</span><span class="p">:</span><span class="mi">8</span><span class="p">,</span> <span class="n">ssaa</span><span class="p">:</span><span class="mi">3</span>
<span class="go"> Setup time: 0.563097 s
Render time: 1501.46532 s
 Total time: 1502.028417 s
</span></code></pre></div></div>

<p>But wait, there’s more!</p>

<h3 id="my-other-computer-is-also-an-arm">My other computer is also an ARM</h3>

<p>So, I bought two new computers last year. The other was a Raspberry Pi 400.</p>

<p>This is a 4 core passively cooled beast, but still running overclocked from
1.8GHz to 2.2GHz without breaking a sweat. For normal “heavy” use, like
running video streams from rC3 all day, that is.</p>

<h6 id="bonus-raspberry-pi-400-oc-22ghz">Bonus: Raspberry Pi 400 OC 2.2GHz</h6>

<p>Sitting steady at 66°C core temperature with 30% of the rendering done, and an
estimate of 2400s to go. This estimate will go up though, because the first
30% is the easy part.</p>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[6] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span><span class="p">,</span> <span class="n">threads</span><span class="p">:</span><span class="mi">4</span><span class="p">,</span> <span class="n">ssaa</span><span class="p">:</span><span class="mi">3</span>
<span class="go"> Setup time: 1.374378639 s
Render time: 5541.122792698 s
 Total time: 5542.497171337 s
</span></code></pre></div></div>

<p>There we go. The final results are in. M1 beats everything by far, as expected,
but the RPi400 is just 9 times slower, on passive cooling. Not warmer to the
touch after 1 1/2 hours of hard work, than the actively cooled M1 was after
10 minutes.</p>]]></content><author><name>Calle Englund</name></author><category term="discord" /><category term="raytracerchallenge" /><category term="raytracing" /><category term="ruby" /><summary type="html"><![CDATA[While doing something else than I was planning to, I accedentally came back to the raytracer I once wrote in Ruby, and decided that the important thing just now is to benchmark my MacBook Pro M1 against those old results. I guess this will actually be Ruby 3 on M1 vs Ruby 2 on i7, because time happened.]]></summary></entry><entry><title type="html">Further down the rabbit hole</title><link href="https://notfiles.xyz/2021/05/06/further-down-the-rabbit-hole/" rel="alternate" type="text/html" title="Further down the rabbit hole" /><published>2021-05-06T00:00:00+02:00</published><updated>2021-05-06T00:00:00+02:00</updated><id>https://notfiles.xyz/2021/05/06/further-down-the-rabbit-hole</id><content type="html" xml:base="https://notfiles.xyz/2021/05/06/further-down-the-rabbit-hole/"><![CDATA[<h3 id="hello-darkness-my-old-friend">Hello darkness, my old friend</h3>
<p><img src="/img/2021/hello-darkness.png" alt="" title="web page with dark color scheme" class="right max25" /></p>

<p>I woke up way too early, and couldn’t go back to sleep. What better way to spend a few hours before regular wake-up time, than hacking sassy style sheets?</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$brand-color</span><span class="p">:</span> <span class="mh">#F15A29</span><span class="p">;</span>
<span class="nv">$gray-color</span><span class="p">:</span>  <span class="nf">desaturate</span><span class="p">(</span><span class="nv">$brand-color</span><span class="o">,</span> <span class="m">85%</span><span class="p">);</span>
</code></pre></div></div>

<p>All color theming is now rewritten to use custom CSS properties instead of SCSS variables, and just the definition of the properties are SCSS. For some reason the jekyll sassifier does not expand <code class="language-plaintext nowrap highlighter-rouge">$variable</code> in custom properties, so all those had to be wrapped in <code class="language-plaintext nowrap highlighter-rouge">#{$variable}</code> interpolations instead.</p>

<div class="language-scss clear highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$dark-gray-color</span><span class="p">:</span>           <span class="nv">$gray-color</span><span class="p">;</span>
<span class="nv">$dark-background-color</span><span class="p">:</span>     <span class="nf">darken</span><span class="p">(</span><span class="nv">$dark-gray-color</span><span class="o">,</span> <span class="m">45%</span><span class="p">);</span>
<span class="nv">$dark-text-color</span><span class="p">:</span>           <span class="nf">lighten</span><span class="p">(</span><span class="nv">$dark-gray-color</span><span class="o">,</span> <span class="m">40%</span><span class="p">);</span>

<span class="nd">:root</span> <span class="p">{</span>
    <span class="na">--base-bg-color</span><span class="p">:</span>        <span class="si">#{</span><span class="nv">$dark-background-color</span><span class="p">)</span><span class="si">}</span><span class="p">;</span>
    <span class="na">--light-bg-color</span><span class="p">:</span>       <span class="si">#{</span><span class="nf">lighten</span><span class="p">(</span><span class="nv">$dark-background-color</span><span class="o">,</span> <span class="m">5%</span><span class="p">))</span><span class="si">}</span><span class="p">;</span>
    <span class="na">--dark-bg-color</span><span class="p">:</span>        <span class="si">#{</span><span class="nf">darken</span><span class="p">(</span><span class="nv">$dark-background-color</span><span class="o">,</span> <span class="m">5%</span><span class="p">))</span><span class="si">}</span><span class="p">;</span>

    <span class="na">--base-text-color</span><span class="p">:</span>      <span class="si">#{</span><span class="nv">$dark-text-color</span><span class="p">)</span><span class="si">}</span><span class="p">;</span>
    <span class="na">--fade-text-color</span><span class="p">:</span>      <span class="si">#{</span><span class="nf">darken</span><span class="p">(</span><span class="nv">$dark-text-color</span><span class="o">,</span> <span class="m">25%</span><span class="p">))</span><span class="si">}</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="the-futures-so-bright-i-gotta-wear-shades">The future’s so bright, I gotta wear shades</h3>
<p><img src="/img/2021/omg-so-bright.png" alt="" title="web page with light color scheme" class="right max25" /></p>

<p>Down, and down, we go.</p>

<p>With the theming rewrite, it’s much easier to define variations of the theme, and let <code class="language-plaintext nowrap highlighter-rouge">@media</code> selectors do the work of picking the correct one. In the future this can easily be extended to also accomodate e.g. <em>high contrast</em> preferences.</p>

<p>This is the first stab of the light color scheme, that will be presented to viewers with a preference of being blinded, but this will take more work to get right.</p>

<p>Code syntax higlighting blocks still use the dark theme, because code is supposed to be read in the darkness anyway.</p>

<div class="language-scss clear highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$light-gray-color</span><span class="p">:</span>          <span class="nv">$gray-color</span><span class="p">;</span>
<span class="nv">$light-background-color</span><span class="p">:</span>    <span class="nf">lighten</span><span class="p">(</span><span class="nv">$light-gray-color</span><span class="o">,</span> <span class="m">40%</span><span class="p">);</span>
<span class="nv">$light-text-color</span><span class="p">:</span>          <span class="nf">darken</span><span class="p">(</span><span class="nv">$light-gray-color</span><span class="o">,</span> <span class="m">45%</span><span class="p">);</span>

<span class="k">@media</span> <span class="n">screen</span> <span class="nf">and</span> <span class="p">(</span><span class="n">prefers-color-scheme</span><span class="o">:</span> <span class="n">light</span><span class="p">)</span> <span class="p">{</span>
    <span class="nd">:root</span> <span class="p">{</span>
        <span class="na">--base-bg-color</span><span class="p">:</span>    <span class="si">#{</span><span class="nv">$light-background-color</span><span class="p">)</span><span class="si">}</span><span class="p">;</span>
        <span class="na">--light-bg-color</span><span class="p">:</span>   <span class="si">#{</span><span class="nf">lighten</span><span class="p">(</span><span class="nv">$light-background-color</span><span class="o">,</span> <span class="m">5%</span><span class="p">))</span><span class="si">}</span><span class="p">;</span>
        <span class="na">--dark-bg-color</span><span class="p">:</span>    <span class="si">#{</span><span class="nf">darken</span><span class="p">(</span><span class="nv">$light-background-color</span><span class="o">,</span> <span class="m">5%</span><span class="p">))</span><span class="si">}</span><span class="p">;</span>

        <span class="na">--base-text-color</span><span class="p">:</span>  <span class="si">#{</span><span class="nv">$light-text-color</span><span class="p">)</span><span class="si">}</span><span class="p">;</span>
        <span class="na">--fade-text-color</span><span class="p">:</span>  <span class="si">#{</span><span class="nf">lighten</span><span class="p">(</span><span class="nv">$light-text-color</span><span class="o">,</span> <span class="m">25%</span><span class="p">))</span><span class="si">}</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Calle Englund</name></author><category term="discord" /><category term="adhd" /><category term="scss" /><summary type="html"><![CDATA[Hello darkness, my old friend]]></summary></entry><entry><title type="html">Hyperfixation Revisited</title><link href="https://notfiles.xyz/2021/05/05/hyperfixation-revisited/" rel="alternate" type="text/html" title="Hyperfixation Revisited" /><published>2021-05-05T00:00:00+02:00</published><updated>2021-05-05T00:00:00+02:00</updated><id>https://notfiles.xyz/2021/05/05/hyperfixation-revisited</id><content type="html" xml:base="https://notfiles.xyz/2021/05/05/hyperfixation-revisited/"><![CDATA[<p><img src="/img/2021/css-overflow.png" alt="overflow" title="Floating image extending outside its container" class="left max50" />
For some reason I found myself browsing my old blog posts, when I got assaulted by this scene, as straight out of a horror movie.</p>

<p>And while I was adding <code class="language-plaintext highlighter-rouge">@extend %clearfix</code> in places, I also thought I’d fix some other layout imperfections I noticed, and all of my morning disappeared; time to make coffee and “go to” work.</p>

<h3 id="down-the-rabbit-hole-again">Down the rabbit hole again</h3>

<p>This was also the first time I’ve made a follow-up to a specific post, instead of referencing earlier posts in a series on a given theme, so I needed to make that kind of relation stand out.</p>

<p>While doing this, I had found horrible abuses of <code class="language-plaintext highlighter-rouge">&lt;ul&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;li&gt;</code> wrappers for vertical layout, so I ripped those out and flattened the DOM tree a bit. With this the actual blog post got promoted to be the main content, instead of just another list item with the related posts, so that’s nice.</p>

<p>Now I’ve started thinking, and I should take a look at making a light theme for those who have not yet embraced the darkness; so investingation of media queries for that, and switch to using <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties">custom CSS properties</a> instead of SASS variables for the color theme. That way I can wrap the color theme setup in a media query to get automatic switching, depending on the viewer’s preference.</p>]]></content><author><name>Calle Englund</name></author><category term="discord" /><category term="adhd" /><category term="scss" /><category term="jekyll" /><summary type="html"><![CDATA[For some reason I found myself browsing my old blog posts, when I got assaulted by this scene, as straight out of a horror movie.]]></summary></entry><entry><title type="html">Linear algebra in a new language</title><link href="https://notfiles.xyz/2020/10/03/linear-algebra-in-a-new-language/" rel="alternate" type="text/html" title="Linear algebra in a new language" /><published>2020-10-03T17:15:00+02:00</published><updated>2020-10-03T17:15:00+02:00</updated><id>https://notfiles.xyz/2020/10/03/linear-algebra-in-a-new-language</id><content type="html" xml:base="https://notfiles.xyz/2020/10/03/linear-algebra-in-a-new-language/"><![CDATA[<p>For reasons unknown, I stumbled onto the <a href="https://ziglang.org">Zig</a> programming language, a new, still in development, low-level systems programming language; like C, but without all the bad things. So I guess quite different from C, but syntax is similarish. It uses LLVM as compiler backend, so it pretty much runs on everything less than 20 years old, and crosscompiles like that’s what you always do.</p>

<p>I decided to write a nice generic API for the subset of Linear Algebra that’s needed for 3D computer graphics, in case I want to write another raytracer in the near future, and optimize for performance this time.</p>

<div class="language-zig highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">test</span> <span class="s">"vector cross product"</span> <span class="p">{</span>
    <span class="k">const</span> <span class="n">x</span> <span class="o">=</span> <span class="n">vector</span><span class="p">([</span><span class="mi">_</span><span class="p">]</span><span class="kt">f32</span><span class="p">{</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span> <span class="p">});</span>
    <span class="k">const</span> <span class="n">y</span> <span class="o">=</span> <span class="n">vector</span><span class="p">([</span><span class="mi">_</span><span class="p">]</span><span class="kt">f32</span><span class="p">{</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span> <span class="p">});</span>
    <span class="k">const</span> <span class="n">z</span> <span class="o">=</span> <span class="n">vector</span><span class="p">([</span><span class="mi">_</span><span class="p">]</span><span class="kt">f32</span><span class="p">{</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span> <span class="p">});</span>

    <span class="n">expectEqual</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">.</span><span class="nf">cross</span><span class="p">(</span><span class="n">z</span><span class="p">));</span>
    <span class="n">expectEqual</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">.</span><span class="nf">cross</span><span class="p">(</span><span class="n">x</span><span class="p">));</span>
    <span class="n">expectEqual</span><span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="n">x</span><span class="p">.</span><span class="nf">cross</span><span class="p">(</span><span class="n">y</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<p>One very cool feature that makes this possible in a statically typed, <a href="https://en.wikipedia.org/wiki/Ahead-of-time_compilation">AOT</a> compiled language is that the compiler actually interprets as much of the code it can at compile time, making the language meta-programmable in itself.</p>

<div class="language-zig highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// return anytype inference is currently a TODO compiler error so</span>
<span class="c">// the switch on type must be duplicated instead</span>
<span class="k">pub</span> <span class="k">fn</span> <span class="n">vector</span><span class="p">(</span><span class="n">arg</span><span class="p">:</span> <span class="n">anytype</span><span class="p">)</span> <span class="n">anytype</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="k">switch</span> <span class="p">(</span><span class="nb">@typeInfo</span><span class="p">(</span><span class="nb">@TypeOf</span><span class="p">(</span><span class="n">arg</span><span class="p">)))</span> <span class="p">{</span>
        <span class="p">.</span><span class="py">Array</span> <span class="o">=&gt;</span> <span class="p">|</span><span class="n">t</span><span class="p">|</span> <span class="n">VecT</span><span class="p">([</span><span class="n">t</span><span class="p">.</span><span class="py">len</span><span class="p">]</span><span class="n">t</span><span class="p">.</span><span class="py">child</span><span class="p">),</span>
        <span class="p">.</span><span class="py">Vector</span> <span class="o">=&gt;</span> <span class="p">|</span><span class="n">t</span><span class="p">|</span> <span class="n">VecT</span><span class="p">([</span><span class="n">t</span><span class="p">.</span><span class="py">len</span><span class="p">]</span><span class="n">t</span><span class="p">.</span><span class="py">child</span><span class="p">),</span>
        <span class="k">else</span> <span class="o">=&gt;</span> <span class="nb">@compileError</span><span class="p">(</span><span class="s">"cannot cast from "</span> <span class="o">++</span> <span class="nb">@typeName</span><span class="p">(</span><span class="nb">@TypeOf</span><span class="p">(</span><span class="n">arg</span><span class="p">))),</span>
    <span class="p">}).</span><span class="nf">cast</span><span class="p">(</span><span class="n">arg</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This constructor takes any array slice of a numeric type, or a SIMD vector, and casts into a matching <code class="language-plaintext highlighter-rouge">struct{x:f32, ...}</code> value, for convenient element access. Because types are first-class values at comptime, this is done at comptime, and reduces to <code class="language-plaintext highlighter-rouge">VecT(...).cast(...)</code>, and futher on because the actual value of <code class="language-plaintext highlighter-rouge">arg</code> does not need to be known, only its type, so those functions are also evaluated at comptime, creating the proper type <code class="language-plaintext highlighter-rouge">struct{x:f32, ...}</code> with specialized versions of all generic functions. Then the specialized <code class="language-plaintext highlighter-rouge">cast()</code> function, still at comptime, does type coersion and safely reinterprets the value as itself. Any errors found are raised as compile errors, with a proper call trace of how it got there, instead of just the file name and line number.</p>

<div class="language-zig highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="n">Simd</span> <span class="o">=</span> <span class="n">std</span><span class="p">.</span><span class="py">meta</span><span class="p">.</span><span class="nf">Vector</span><span class="p">(</span><span class="nb">@This</span><span class="p">().</span><span class="py">len</span><span class="p">,</span> <span class="nb">@This</span><span class="p">().</span><span class="py">T</span><span class="p">);</span>

<span class="k">pub</span> <span class="k">fn</span> <span class="n">cross</span><span class="p">(</span><span class="n">u</span><span class="p">:</span> <span class="nb">@This</span><span class="p">(),</span> <span class="n">v</span><span class="p">:</span> <span class="nb">@This</span><span class="p">())</span> <span class="nb">@This</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">use_simd</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">const</span> <span class="n">u_yzx</span><span class="p">:</span> <span class="n">Simd</span> <span class="o">=</span> <span class="o">.</span><span class="p">{</span> <span class="n">u</span><span class="p">.</span><span class="py">y</span><span class="p">,</span> <span class="n">u</span><span class="p">.</span><span class="py">z</span><span class="p">,</span> <span class="n">u</span><span class="p">.</span><span class="py">x</span> <span class="p">};</span>
        <span class="k">const</span> <span class="n">u_zxy</span><span class="p">:</span> <span class="n">Simd</span> <span class="o">=</span> <span class="o">.</span><span class="p">{</span> <span class="n">u</span><span class="p">.</span><span class="py">z</span><span class="p">,</span> <span class="n">u</span><span class="p">.</span><span class="py">x</span><span class="p">,</span> <span class="n">u</span><span class="p">.</span><span class="py">y</span> <span class="p">};</span>
        <span class="k">const</span> <span class="n">v_yzx</span><span class="p">:</span> <span class="n">Simd</span> <span class="o">=</span> <span class="o">.</span><span class="p">{</span> <span class="n">v</span><span class="p">.</span><span class="py">y</span><span class="p">,</span> <span class="n">v</span><span class="p">.</span><span class="py">z</span><span class="p">,</span> <span class="n">v</span><span class="p">.</span><span class="py">x</span> <span class="p">};</span>
        <span class="k">const</span> <span class="n">v_zxy</span><span class="p">:</span> <span class="n">Simd</span> <span class="o">=</span> <span class="o">.</span><span class="p">{</span> <span class="n">v</span><span class="p">.</span><span class="py">z</span><span class="p">,</span> <span class="n">v</span><span class="p">.</span><span class="py">x</span><span class="p">,</span> <span class="n">v</span><span class="p">.</span><span class="py">y</span> <span class="p">};</span>

        <span class="k">return</span> <span class="nb">@This</span><span class="p">().</span><span class="nf">cast</span><span class="p">(</span><span class="n">u_yzx</span> <span class="o">*</span> <span class="n">v_zxy</span> <span class="o">-</span> <span class="n">u_zxy</span> <span class="o">*</span> <span class="n">v_yzx</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">@This</span><span class="p">(){</span>
            <span class="p">.</span><span class="py">x</span> <span class="o">=</span> <span class="n">u</span><span class="p">.</span><span class="py">y</span> <span class="o">*</span> <span class="n">v</span><span class="p">.</span><span class="py">z</span> <span class="o">-</span> <span class="n">u</span><span class="p">.</span><span class="py">z</span> <span class="o">*</span> <span class="n">v</span><span class="p">.</span><span class="py">y</span><span class="p">,</span>
            <span class="p">.</span><span class="py">y</span> <span class="o">=</span> <span class="n">u</span><span class="p">.</span><span class="py">z</span> <span class="o">*</span> <span class="n">v</span><span class="p">.</span><span class="py">x</span> <span class="o">-</span> <span class="n">u</span><span class="p">.</span><span class="py">x</span> <span class="o">*</span> <span class="n">v</span><span class="p">.</span><span class="py">z</span><span class="p">,</span>
            <span class="p">.</span><span class="py">z</span> <span class="o">=</span> <span class="n">u</span><span class="p">.</span><span class="py">x</span> <span class="o">*</span> <span class="n">v</span><span class="p">.</span><span class="py">y</span> <span class="o">-</span> <span class="n">u</span><span class="p">.</span><span class="py">y</span> <span class="o">*</span> <span class="n">v</span><span class="p">.</span><span class="py">x</span><span class="p">,</span>
        <span class="p">};</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">cross()</code> function is comptime specialized for the <code class="language-plaintext highlighter-rouge">@This()</code> type, and allows conditional compilation of the SIMD or non-SIMD implementation. And again the <code class="language-plaintext highlighter-rouge">Simd</code> data type is also specialized at comptime with help of the meta programming submodule of the standard library. Due to lazy evaluation at comptime, this only happens if the SIMD version is compiled, with no need for extra guards to avoid dead code.</p>

<p>If we want to run benchmarks to see of the attempted SIMD optimization gave any performance boost, we can simple instanciate all the versions of the vector type and compare.</p>

<div class="language-zig highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Benchmark</span>                          <span class="n">Mean</span><span class="p">(</span><span class="n">ns</span><span class="p">)</span>
<span class="o">-------------------------------------------</span>
<span class="n">cross_cold</span><span class="p">([</span><span class="mi">3</span><span class="p">]</span><span class="kt">f16</span><span class="p">,</span> <span class="n">SIMD</span><span class="p">)</span>              <span class="mf">6.149</span>
<span class="n">cross_cold</span><span class="p">([</span><span class="mi">3</span><span class="p">]</span><span class="kt">f32</span><span class="p">,</span> <span class="n">SIMD</span><span class="p">)</span>              <span class="mf">1.619</span>
<span class="n">cross_cold</span><span class="p">([</span><span class="mi">3</span><span class="p">]</span><span class="kt">f64</span><span class="p">,</span> <span class="n">SIMD</span><span class="p">)</span>              <span class="mf">1.708</span>
<span class="n">cross_cold</span><span class="p">([</span><span class="mi">3</span><span class="p">]</span><span class="kt">f16</span><span class="p">,</span> <span class="n">non</span><span class="o">-</span><span class="n">SIMD</span><span class="p">)</span>          <span class="mf">4.245</span>
<span class="n">cross_cold</span><span class="p">([</span><span class="mi">3</span><span class="p">]</span><span class="kt">f32</span><span class="p">,</span> <span class="n">non</span><span class="o">-</span><span class="n">SIMD</span><span class="p">)</span>          <span class="mf">1.247</span>
<span class="n">cross_cold</span><span class="p">([</span><span class="mi">3</span><span class="p">]</span><span class="kt">f64</span><span class="p">,</span> <span class="n">non</span><span class="o">-</span><span class="n">SIMD</span><span class="p">)</span>          <span class="mf">1.080</span>
<span class="n">cross_hot</span><span class="p">([</span><span class="mi">3</span><span class="p">]</span><span class="kt">f16</span><span class="p">,</span> <span class="n">SIMD</span><span class="p">)</span>               <span class="mf">0.842</span>
<span class="n">cross_hot</span><span class="p">([</span><span class="mi">3</span><span class="p">]</span><span class="kt">f32</span><span class="p">,</span> <span class="n">SIMD</span><span class="p">)</span>               <span class="mf">0.840</span>
<span class="n">cross_hot</span><span class="p">([</span><span class="mi">3</span><span class="p">]</span><span class="kt">f64</span><span class="p">,</span> <span class="n">SIMD</span><span class="p">)</span>               <span class="mf">0.832</span>
<span class="n">cross_hot</span><span class="p">([</span><span class="mi">3</span><span class="p">]</span><span class="kt">f16</span><span class="p">,</span> <span class="n">non</span><span class="o">-</span><span class="n">SIMD</span><span class="p">)</span>           <span class="mf">0.847</span>
<span class="n">cross_hot</span><span class="p">([</span><span class="mi">3</span><span class="p">]</span><span class="kt">f32</span><span class="p">,</span> <span class="n">non</span><span class="o">-</span><span class="n">SIMD</span><span class="p">)</span>           <span class="mf">0.841</span>
<span class="n">cross_hot</span><span class="p">([</span><span class="mi">3</span><span class="p">]</span><span class="kt">f64</span><span class="p">,</span> <span class="n">non</span><span class="o">-</span><span class="n">SIMD</span><span class="p">)</span>           <span class="mf">0.897</span>
</code></pre></div></div>

<p>It seems like that when data is hot in the cache, it doesn’t really matter, but cold data has much worse performance for the SIMD implementation, so that SIMD shuffle load code needs some work, and even then this particular operation doesn’t gain anything, at least not on this i7 CPU.</p>

<p>Running the same language dynamically interpreted at compile time, as statically at runtime really is the best of both worlds; the blazing runtime speed of a static language, and most of the in-language meta programming capabilities of a dynamic language.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="algebra" /><category term="zig" /><summary type="html"><![CDATA[For reasons unknown, I stumbled onto the [Zig] programming language, a new, still in development, low-level systems programming language; like C, but without all the bad things. So I guess quite different from C, but syntax is similarish. It uses LLVM as compiler backend, so it pretty much runs on everything less than 20 years old, and crosscompiles like that’s what you always do.]]></summary></entry><entry><title type="html">Hyperfixation</title><link href="https://notfiles.xyz/2020/09/30/hyperfixation/" rel="alternate" type="text/html" title="Hyperfixation" /><published>2020-09-30T18:27:00+02:00</published><updated>2020-09-30T18:27:00+02:00</updated><id>https://notfiles.xyz/2020/09/30/hyperfixation</id><content type="html" xml:base="https://notfiles.xyz/2020/09/30/hyperfixation/"><![CDATA[<p>A few days ago I was reminded that it’s almost October, which is not only <a href="https://inktober.com">Inktober</a>, but also <a href="https://duckduckgo.com/?q=adhd+awareness+month+color&amp;t=h_&amp;ia=web">ADHD Awareness Month</a>, which I spent last year getting a thorough neuropsychatric evaluation. Someone also told me that there is an ADHD Awareness Ribbon, <strong>AND IT’S MY FAVOURITE COLOR!!11</strong> Ehm, sorry<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">1</a></sup> about that.</p>

<p><img src="/img/orange-ribbon.svg" alt="ADHD Orange Ribbon" class="right max25" /></p>

<p>Anyway, so I went ahead to change the accent color on this piece of web, that I don’t use that often, and probably noone follows. So, it used to be a bright <em style="color: #FF963E">Pumpkin Orange</em> which is completely different from the darker <em style="color: #F15A29">ADHD Orange</em><sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">2</a></sup>.</p>

<p>Well, to do that I had to look that the SASS and Jekyll/Liquid that it’s made of. &#x1f648;</p>

<p>Four? hours later I was inexplicably <strong>HANGRY</strong>, but somewhat pleased with what I’d accomplished. Suddenly another four? hours passed, but at least I had eaten something? But it was well past midnight, and work day after. <code class="language-plaintext highlighter-rouge">git push</code></p>

<p>Just a few quick stabs at things during breakfast, before work. <code class="language-plaintext highlighter-rouge">git push</code></p>

<p>&#x1f640; I broke the site menu for narrow displays! For all the zero visitors during the whole day until I could sit down and fix it, after work. Somehow I had dinner at almost midnight-ish. Again. But it was all done, with pagination rewritten from scratch, because apparently that needed to happen. Not perfect, but good enough.</p>

<p>Breakfast, playing around with the pagination buttons. &#x1f640; The pagination gets all messed up in a corner case.</p>

<p><code class="language-plaintext highlighter-rouge">git push</code> Four minutes until daily roll call at work. &#x1f605;</p>

<p>I was going to quickly change <del><code class="language-plaintext highlighter-rouge">#FF963E</code></del> to <ins><code class="language-plaintext highlighter-rouge">#F15A29</code></ins>, but got hyperfixated<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup> for a few days, maybe I still am. I guess I’ll know tomorrow.</p>

<p>Hi, I’m Calle, I have ADHD.</p>

<p><code class="language-plaintext highlighter-rouge">git push</code></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:2" role="doc-endnote">
      <p>not sorry <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#x21a9;</a></p>
    </li>
    <li id="fn:1" role="doc-endnote">
      <p>authoritatively picked from some random site with awareness ribbons that I found and lost again <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#x21a9;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>repeated hyperfocus on the same thing over a period of time <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#x21a9;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Calle Englund</name></author><category term="discord" /><category term="adhd" /><category term="scss" /><category term="jekyll" /><summary type="html"><![CDATA[A few days ago I was reminded that it’s almost October, which is not only Inktober, but also ADHD Awareness Month, which I spent last year getting a thorough neuropsychatric evaluation. Someone also told me that there is an ADHD Awareness Ribbon, AND IT’S MY FAVOURITE COLOR!!11 Ehm, sorry1 about that. not sorry &#x21a9;]]></summary></entry><entry><title type="html">Messy shadows</title><link href="https://notfiles.xyz/2019/12/08/messy-shadows/" rel="alternate" type="text/html" title="Messy shadows" /><published>2019-12-08T22:14:00+01:00</published><updated>2019-12-08T22:14:00+01:00</updated><id>https://notfiles.xyz/2019/12/08/messy-shadows</id><content type="html" xml:base="https://notfiles.xyz/2019/12/08/messy-shadows/"><![CDATA[<p>Apparently, I messed up some more vector algebra. Ray / surface hits currently record the event in surface space, which works just fine for shading a unit sphere still positioned at origin. When we transform things around, and try to cast the secondary shadow rays, it becomes painfully obvious that surface space and world space no longer coincide.</p>

<p><img src="/img/2019/12/messy-shadows.png" alt="Messed up shadows" /></p>]]></content><author><name>Calle Englund</name></author><category term="[&quot;devlog&quot;]" /><category term="devember" /><category term="devember2019" /><category term="hourofcode" /><category term="swift" /><category term="raytracing" /><summary type="html"><![CDATA[Apparently, I messed up some more vector algebra. Ray / surface hits currently record the event in surface space, which works just fine for shading a unit sphere still positioned at origin. When we transform things around, and try to cast the secondary shadow rays, it becomes painfully obvious that surface space and world space no longer coincide.]]></summary></entry><entry><title type="html">All the things</title><link href="https://notfiles.xyz/2019/12/07/all-the-things/" rel="alternate" type="text/html" title="All the things" /><published>2019-12-07T12:22:00+01:00</published><updated>2019-12-07T12:22:00+01:00</updated><id>https://notfiles.xyz/2019/12/07/all-the-things</id><content type="html" xml:base="https://notfiles.xyz/2019/12/07/all-the-things/"><![CDATA[<p>One limitation so far was that there could only be one surface in a scene. To get past that, we add the <code class="language-plaintext highlighter-rouge">Group</code> meta-surface, that contains a number of surfaces, and intersects with rays on their behalf. To make this actually useful, surfaces also need transforms to translate them out of their shared origin.</p>

<p>To keep the simplified unit sphere intersection formula, the surface is not actually transformed, but instead the intersecting ray is inversely transformed to shift its frame of reference to the surface.</p>

<p><img src="/img/2019/12/grouped-spheres.png" alt="Group of spheres" /></p>]]></content><author><name>Calle Englund</name></author><category term="[&quot;devlog&quot;]" /><category term="devember" /><category term="devember2019" /><category term="hourofcode" /><category term="swift" /><category term="raytracing" /><summary type="html"><![CDATA[One limitation so far was that there could only be one surface in a scene. To get past that, we add the Group meta-surface, that contains a number of surfaces, and intersects with rays on their behalf. To make this actually useful, surfaces also need transforms to translate them out of their shared origin.]]></summary></entry><entry><title type="html">Light and Magic</title><link href="https://notfiles.xyz/2019/12/06/light-and-magic/" rel="alternate" type="text/html" title="Light and Magic" /><published>2019-12-06T22:32:00+01:00</published><updated>2019-12-06T22:32:00+01:00</updated><id>https://notfiles.xyz/2019/12/06/light-and-magic</id><content type="html" xml:base="https://notfiles.xyz/2019/12/06/light-and-magic/"><![CDATA[<p>The next natural step after getting basic shading to work is to have actual light sources, that can be tinted and positioned in the scene.</p>

<p>Enter the <code class="language-plaintext highlighter-rouge">PointLight()</code> and <code class="language-plaintext highlighter-rouge">DistantLight()</code> classes of lights. A point light can be translated to a position, and irradiates the scene spherically from that position, and will be attenuated by distance. A distant light on the other hand, irradiates the scene with parallel rays of light, with the same power, and direction all over (like the fake “camera light”).</p>

<p>Because we can’t have more than one surface in the world at the moment, nothing can obscure the light (cast shadows). Here we have three light sources, yellow above to the left, cyan above to the right, and magenta below in front.</p>

<p><img src="/img/2019/12/light-and-magic.png" alt="Light &amp; Magic" /></p>]]></content><author><name>Calle Englund</name></author><category term="[&quot;devlog&quot;]" /><category term="devember" /><category term="devember2019" /><category term="hourofcode" /><category term="swift" /><category term="raytracing" /><summary type="html"><![CDATA[The next natural step after getting basic shading to work is to have actual light sources, that can be tinted and positioned in the scene.]]></summary></entry><entry><title type="html">Working camera</title><link href="https://notfiles.xyz/2019/12/05/working-camera/" rel="alternate" type="text/html" title="Working camera" /><published>2019-12-05T20:21:00+01:00</published><updated>2019-12-05T20:21:00+01:00</updated><id>https://notfiles.xyz/2019/12/05/working-camera</id><content type="html" xml:base="https://notfiles.xyz/2019/12/05/working-camera/"><![CDATA[<p>So yesterday’s attempt at capturing an image didn’t turn out so well, because I messed up the camera, or rather the vector algebra behind everything. When I realized what I had done, I instantly remembered that similar lesson from last year; because points have <code class="language-plaintext highlighter-rouge">w=1</code>, while vectors have <code class="language-plaintext highlighter-rouge">w=0</code>, almost all vector operations will get messed up by the extra <code class="language-plaintext highlighter-rouge">1</code>, if you accidentally use a point instead. Or vice versa.</p>

<p>When fixing that I also realized I forgot to translate the camera away from the origin of the sphere I tried to take a picture of, but the vector/point mess-up had accidentally warped space to get a decent composition anyway.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">typealias</span> <span class="kt">Transform</span> <span class="o">=</span> <span class="n">simd_double4x4</span>

<span class="kd">extension</span> <span class="kt">Transform</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">translate</span><span class="p">(</span><span class="n">to</span> <span class="nv">position</span><span class="p">:</span> <span class="kt">Point</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Transform</span> <span class="p">{</span>
        <span class="nf">simd_matrix</span><span class="p">(</span><span class="o">.</span><span class="nf">vector</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span>
                    <span class="o">.</span><span class="nf">vector</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span>
                    <span class="o">.</span><span class="nf">vector</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span>
                    <span class="n">position</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And with that, the “camera light” shaded sphere is rendered at full intensity.</p>

<p><img src="/img/2019/12/white-sphere.png" alt="White sphere" /></p>]]></content><author><name>Calle Englund</name></author><category term="[&quot;devlog&quot;]" /><category term="devember" /><category term="devember2019" /><category term="hourofcode" /><category term="swift" /><category term="raytracing" /><summary type="html"><![CDATA[So yesterday’s attempt at capturing an image didn’t turn out so well, because I messed up the camera, or rather the vector algebra behind everything. When I realized what I had done, I instantly remembered that similar lesson from last year; because points have w=1, while vectors have w=0, almost all vector operations will get messed up by the extra 1, if you accidentally use a point instead. Or vice versa.]]></summary></entry><entry><title type="html">Actual pixels</title><link href="https://notfiles.xyz/2019/12/04/actual-pixels/" rel="alternate" type="text/html" title="Actual pixels" /><published>2019-12-04T22:57:00+01:00</published><updated>2019-12-04T22:57:00+01:00</updated><id>https://notfiles.xyz/2019/12/04/actual-pixels</id><content type="html" xml:base="https://notfiles.xyz/2019/12/04/actual-pixels/"><![CDATA[<p>First actual image generated, using a “camera light”. The shading is too dark, for some reason I can’t figure out at the moment, so I guess tomorrow will be more of a debugging session than new feature creation.</p>

<p><img src="/img/2019/12/shaded-sphere.png" alt="Shaded sphere" /></p>]]></content><author><name>Calle Englund</name></author><category term="[&quot;devlog&quot;]" /><category term="devember" /><category term="devember2019" /><category term="hourofcode" /><category term="swift" /><category term="raytracing" /><summary type="html"><![CDATA[First actual image generated, using a “camera light”. The shading is too dark, for some reason I can’t figure out at the moment, so I guess tomorrow will be more of a debugging session than new feature creation.]]></summary></entry><entry><title type="html">Pixels on a canvas</title><link href="https://notfiles.xyz/2019/12/03/pixels-on-a-canvas/" rel="alternate" type="text/html" title="Pixels on a canvas" /><published>2019-12-03T23:06:00+01:00</published><updated>2019-12-03T23:06:00+01:00</updated><id>https://notfiles.xyz/2019/12/03/pixels-on-a-canvas</id><content type="html" xml:base="https://notfiles.xyz/2019/12/03/pixels-on-a-canvas/"><![CDATA[<p>Pretty much the whole point of a ray tracer such as this one is to render pretty pictures, and for that we’re going to need a canvas to render onto.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">typedef</span> <span class="kt">Pixel</span> <span class="o">=</span> <span class="n">simd_float4</span>

<span class="kd">struct</span> <span class="kt">Canvas</span> <span class="p">{</span> <span class="k">let</span> <span class="nv">width</span><span class="p">:</span> <span class="kt">Int</span><span class="p">;</span> <span class="k">let</span> <span class="nv">height</span><span class="p">:</span> <span class="kt">Int</span> <span class="p">}</span>
</code></pre></div></div>

<p>Pixels can be set on the canvas, and it can be inspected to see what’s already there. When the rendering is complete the canvas can be exported for display or file output.</p>]]></content><author><name>Calle Englund</name></author><category term="[&quot;devlog&quot;]" /><category term="devember" /><category term="devember2019" /><category term="hourofcode" /><category term="swift" /><category term="raytracing" /><summary type="html"><![CDATA[Pretty much the whole point of a ray tracer such as this one is to render pretty pictures, and for that we’re going to need a canvas to render onto.]]></summary></entry><entry><title type="html">Surface normals</title><link href="https://notfiles.xyz/2019/12/02/surface-normals/" rel="alternate" type="text/html" title="Surface normals" /><published>2019-12-02T18:37:00+01:00</published><updated>2019-12-02T18:37:00+01:00</updated><id>https://notfiles.xyz/2019/12/02/surface-normals</id><content type="html" xml:base="https://notfiles.xyz/2019/12/02/surface-normals/"><![CDATA[<p>Today brings <a href="https://en.wikipedia.org/wiki/Normal_(geometry)">normal vectors</a> into the mix, a critical component for shading computations; the normal vector of a surface at the point where it was hit by a ray, to be precise. Because the normal depends on the hit position on the surface, and we’ll need that too, we keep that around as well.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">Hit</span> <span class="p">{</span> <span class="k">let</span> <span class="nv">surface</span><span class="p">:</span> <span class="kt">Surface</span><span class="p">;</span> <span class="k">let</span> <span class="nv">position</span><span class="p">:</span> <span class="kt">Point</span><span class="p">;</span> <span class="k">let</span> <span class="nv">normal</span><span class="p">:</span> <span class="kt">Vector</span> <span class="p">}</span>

<span class="kd">extension</span> <span class="kt">Ray</span> <span class="p">{</span> <span class="kd">func</span> <span class="nf">hit</span><span class="p">(</span><span class="kt">Surface</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Hit</span><span class="p">?</span> <span class="p">}</span>
</code></pre></div></div>

<p>For the (2-dimensional) <a href="https://en.wikipedia.org/wiki/Unit_sphere">unit sphere</a>, our only surface so far, the normal at a point on its surface can be calculated as the vector from origin: \(\overrightarrow{N}_{hit} = \dot{P}_{hit} - \dot{0}\)</p>]]></content><author><name>Calle Englund</name></author><category term="[&quot;devlog&quot;]" /><category term="devember" /><category term="devember2019" /><category term="hourofcode" /><category term="swift" /><category term="raytracing" /><summary type="html"><![CDATA[Today brings normal vectors into the mix, a critical component for shading computations; the normal vector of a surface at the point where it was hit by a ray, to be precise. Because the normal depends on the hit position on the surface, and we’ll need that too, we keep that around as well.]]></summary></entry><entry><title type="html">Intersecting spheres</title><link href="https://notfiles.xyz/2019/12/01/intersecting-spheres/" rel="alternate" type="text/html" title="Intersecting spheres" /><published>2019-12-01T18:19:00+01:00</published><updated>2019-12-01T18:19:00+01:00</updated><id>https://notfiles.xyz/2019/12/01/intersecting-spheres</id><content type="html" xml:base="https://notfiles.xyz/2019/12/01/intersecting-spheres/"><![CDATA[<p>The first piece of actual ray tracing: calculating the <a href="https://en.wikipedia.org/wiki/Line–sphere_intersection">intersection between a ray and a sphere</a>. To find the intersections, we need to solve the quadratic equation of the sphere being equal to the linear equation of the ray. The interpretation of imaginary roots is that the ray does not intersect the sphere.</p>

<p>Combining the sphere equation \(\|\dot{x} - \dot{C}\|^2 = R^2\) and the line equation \(\dot{x} = \dot{O} + t\overrightarrow{D}\) we get:</p>

\[\|\dot{O} + t\overrightarrow{D} - \dot{C}\|^2 = R^2\]

<p>Since the unit sphere is centered at \(\dot{0}\) and its radius is \(1\), the equation can be simplified:</p>

\[\|\dot{O} + t\overrightarrow{D}\|^2 - 1 = 0\]

<p><em>On another pomodorian side note, actually taking the 5 minute breaks every 25 minutes is really hard, but I’m starting to see how it might be worth it, by not falling into a hyperfocus trance until suddenly SO HANGRY AND WHERE DID THE DAY GO?!</em></p>]]></content><author><name>Calle Englund</name></author><category term="[&quot;devlog&quot;]" /><category term="devember" /><category term="devember2019" /><category term="hourofcode" /><category term="swift" /><category term="raytracing" /><summary type="html"><![CDATA[The first piece of actual ray tracing: calculating the intersection between a ray and a sphere. To find the intersections, we need to solve the quadratic equation of the sphere being equal to the linear equation of the ray. The interpretation of imaginary roots is that the ray does not intersect the sphere.]]></summary></entry><entry><title type="html">Basic data types</title><link href="https://notfiles.xyz/2019/12/01/basic-data-types/" rel="alternate" type="text/html" title="Basic data types" /><published>2019-12-01T11:29:00+01:00</published><updated>2019-12-01T11:29:00+01:00</updated><id>https://notfiles.xyz/2019/12/01/basic-data-types</id><content type="html" xml:base="https://notfiles.xyz/2019/12/01/basic-data-types/"><![CDATA[<p>Alright, the first push to the <a href="https://github.com/notCalle/swift-raytrace.git">github repo</a> is complete. Starting out small with just the basic data types that will be at the core of everything, and some tolerance equality operators for comparisons.</p>

<p>The constructor functions <code class="language-plaintext highlighter-rouge">point()</code> and <code class="language-plaintext highlighter-rouge">vector()</code> use the neat trick of tagging with <code class="language-plaintext highlighter-rouge">.w = 1.0</code> for Points and <code class="language-plaintext highlighter-rouge">.w = 0.0</code> for Vectors.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">typealias</span> <span class="kt">Point</span> <span class="o">=</span> <span class="n">simd_double4</span>
<span class="kd">typealias</span> <span class="kt">Vector</span> <span class="o">=</span> <span class="n">simd_double4</span>
<span class="kd">struct</span> <span class="kt">Ray</span> <span class="p">{</span> <span class="k">let</span> <span class="nv">origin</span><span class="p">:</span> <span class="kt">Point</span><span class="p">;</span> <span class="k">let</span> <span class="nv">direction</span><span class="p">:</span> <span class="kt">Vector</span> <span class="p">}</span>

<span class="k">let</span> <span class="nv">r</span> <span class="o">=</span> <span class="kt">Ray</span><span class="p">(</span><span class="nv">origin</span><span class="p">:</span> <span class="nf">point</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="nv">direction</span><span class="p">:</span> <span class="nf">vector</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
<span class="n">r</span><span class="o">.</span><span class="n">direction</span> <span class="o">==~</span> <span class="nf">vector</span><span class="p">(</span><span class="nf">sqrt</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">3</span><span class="p">))</span> <span class="c1">// rays have normalized direction</span>
</code></pre></div></div>

<p>On a side note, I’m trying out the <a href="https://en.wikipedia.org/wiki/Pomodoro_Technique">pomodoro technique</a> to manage my ability to focus for this project; working in sets of 25 minutes, and taking 5 minute breaks. Maybe I should rephrase the Devember contract as I will work for two pomodoros per day, instead of one hour. Plus one pomodoro for the devlog.</p>]]></content><author><name>Calle Englund</name></author><category term="[&quot;devlog&quot;]" /><category term="devember" /><category term="devember2019" /><category term="hourofcode" /><category term="swift" /><summary type="html"><![CDATA[Alright, the first push to the [github repo] is complete. Starting out small with just the basic data types that will be at the core of everything, and some tolerance equality operators for comparisons.]]></summary></entry><entry><title type="html">Devember again</title><link href="https://notfiles.xyz/2019/11/30/devember-again/" rel="alternate" type="text/html" title="Devember again" /><published>2019-11-30T15:38:00+01:00</published><updated>2019-11-30T15:38:00+01:00</updated><id>https://notfiles.xyz/2019/11/30/devember-again</id><content type="html" xml:base="https://notfiles.xyz/2019/11/30/devember-again/"><![CDATA[<p>This one snuck up on me faster than anticipated, but here we go.</p>

<p>Last year I wrote a ray tracer in Ruby, following <em>The Raytracer Challenge</em>. While the futility of writing such a performance sensitive thing in something as sluggish as Ruby was entertaining, this time I’ll aim for something actually useful.</p>

<p>I, <em>Calle Englund</em>, will participate to the next <a href="https://devember.org">Devember</a>. My Devember will be a ray tracer. I promise I will program for my Devember for at least an hour, every day of the next December. I will also write a daily public devlog and will make the produced code publicly available on the internet. No matter what, I will keep my promise.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2019" /><category term="hourofcode" /><summary type="html"><![CDATA[This one snuck up on me faster than anticipated, but here we go.]]></summary></entry><entry><title type="html">Soft Shadows</title><link href="https://notfiles.xyz/2019/01/29/soft-shadows/" rel="alternate" type="text/html" title="Soft Shadows" /><published>2019-01-29T23:04:59+01:00</published><updated>2019-01-29T23:04:59+01:00</updated><id>https://notfiles.xyz/2019/01/29/soft-shadows</id><content type="html" xml:base="https://notfiles.xyz/2019/01/29/soft-shadows/"><![CDATA[<p><img src="/img/2019/01/teapot-hardshadow.png" alt="Hard shadows" class="right" />
With the recent anti-aliasing feature enables, the image quality is pretty good, but the shadow edges are still too hard to be realistic, because the light source is still just a point without surface area.</p>

<div class="language-pry clear highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[1] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span><span class="p">,</span> <span class="n">threads</span><span class="p">:</span><span class="mi">8</span><span class="p">,</span> <span class="n">ssaa</span><span class="p">:</span><span class="mi">3</span>
<span class="go"> Setup time: 0.574395 s
Render time: 554.427143 s
 Total time: 555.001538 s
</span></code></pre></div></div>

<p><img src="/img/2019/01/teapot-softshadow.png" alt="Soft shadows" class="right" />
We can simulate a light source with a surface area by giving the spherical point light a radius. When the radius is zero, it behaves as before, but when it has a non-zero radius, we cast multiple random shadow rays towards the spherical light volume, and average the result. Combined with SSAA everything looks perfectly smooth.</p>

<div class="language-pry clear highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[1] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span><span class="p">,</span> <span class="n">threads</span><span class="p">:</span><span class="mi">8</span><span class="p">,</span> <span class="n">ssaa</span><span class="p">:</span><span class="mi">3</span>
<span class="go"> Setup time: 0.563097 s
Render time: 1501.46532 s
 Total time: 1502.028417 s
</span></code></pre></div></div>

<p>To manage rendering time, the number of shadow rays is dynamic, with primary ray intersections casting the most number of samples, and rapid falloff over recursion into reflection and refraction. The number of samples is also proportional to the apparent size of the light source at the point of intersection.</p>

<p>Currently the whole scene is intersected for each shadow ray sample, but it should be possible to select a set of possible intersection candidates and multisample against that reduced set instead.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[With the recent anti-aliasing feature enables, the image quality is pretty good, but the shadow edges are still too hard to be realistic, because the light source is still just a point without surface area.]]></summary></entry><entry><title type="html">Super Sampling Anti-Aliasing</title><link href="https://notfiles.xyz/2019/01/13/super-sampling-anti-aliasing/" rel="alternate" type="text/html" title="Super Sampling Anti-Aliasing" /><published>2019-01-13T11:35:32+01:00</published><updated>2019-01-13T11:35:32+01:00</updated><id>https://notfiles.xyz/2019/01/13/super-sampling-anti-aliasing</id><content type="html" xml:base="https://notfiles.xyz/2019/01/13/super-sampling-anti-aliasing/"><![CDATA[<p><img src="/img/2019/01/teapot-jaggies.png" alt="Jaggy Utah Teapot" class="right" />
Remember the smoothly shaded teapot? Still looks pretty rough with all the jaggies and speckles. Well, with the shiny new <a href="/2019/01/13/threaded-rendering/">multi threading</a> support it’s actually feasible to add some image quality improvements.</p>

<div class="language-pry clear highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[1] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span><span class="p">,</span> <span class="n">threads</span><span class="p">:</span><span class="mi">8</span>
<span class="go"> Setup time: 0.564666 s
Render time: 73.976052 s
 Total time: 74.540718 s
</span></code></pre></div></div>

<p><img src="/img/2019/01/teapot-ssaax3.png" alt="Smooth Utah Teapot" class="right" />
Same scene, but rendered with 3x Super Sampling Anti-Aliasing. Nine times as many rays to cast into the world should mean nine times as long rendering time, but the good news is that with heavier rendering, the threading overhead is offset slightly so we only pay 7.5x time penalty for 9x processing.</p>

<div class="language-pry clear highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[2] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span><span class="p">,</span> <span class="n">threads</span><span class="p">:</span><span class="mi">8</span><span class="p">,</span> <span class="n">ssaa</span><span class="p">:</span><span class="mi">3</span>
<span class="go"> Setup time: 0.5425 s
Render time: 561.85829 s
 Total time: 562.40079 s
</span></code></pre></div></div>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[Remember the smoothly shaded teapot? Still looks pretty rough with all the jaggies and speckles. Well, with the shiny new multi threading support it’s actually feasible to add some image quality improvements.]]></summary></entry><entry><title type="html">Threaded rendering</title><link href="https://notfiles.xyz/2019/01/13/threaded-rendering/" rel="alternate" type="text/html" title="Threaded rendering" /><published>2019-01-13T00:21:39+01:00</published><updated>2019-01-13T00:21:39+01:00</updated><id>https://notfiles.xyz/2019/01/13/threaded-rendering</id><content type="html" xml:base="https://notfiles.xyz/2019/01/13/threaded-rendering/"><![CDATA[<p>Shaved another 30% off rendering time by inlining and some more caching, but it seems like I’m reaching the limit of what I can get out of a single thread.</p>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[1] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span>
<span class="go"> Setup time: 0.532384 s
Render time: 259.392946 s
 Total time: 259.92533 s
</span></code></pre></div></div>

<p>There’s quite a bit of overhead, because Ruby doesn’t run its native threads in parallel, so we have to fork and return the result serialized via a file to the parent. This could probably be further optimized by not serializing as YAML, and reusing the render threads, but anyway.</p>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[2] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span><span class="p">,</span> <span class="n">threads</span><span class="p">:</span><span class="mi">2</span>
<span class="go"> Setup time: 0.522643 s
Render time: 149.411224 s
 Total time: 149.933867 s
</span></code></pre></div></div>

<p>This is the number of real CPU cores in my workstation.</p>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[3] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span><span class="p">,</span> <span class="n">threads</span><span class="p">:</span><span class="mi">4</span>
<span class="go"> Setup time: 0.580056 s
Render time: 85.895065 s
 Total time: 86.475121 s
</span></code></pre></div></div>

<p>Using hyperthreading quickly loses efficiency, but gets the CPU fan going.</p>

<div class="language-pry highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[3] pry(#&lt;GlisteningRuby::DSL::Scene&gt;</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">render</span> <span class="n">verbose</span><span class="ss">:true</span><span class="p">,</span> <span class="n">threads</span><span class="p">:</span><span class="mi">8</span>
<span class="go"> Setup time: 0.560456 s
Render time: 77.613168 s
 Total time: 78.173624 s
</span></code></pre></div></div>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[Shaved another 30% off rendering time by inlining and some more caching, but it seems like I’m reaching the limit of what I can get out of a single thread.]]></summary></entry><entry><title type="html">Light and Magic</title><link href="https://notfiles.xyz/2019/01/08/light-and-magic/" rel="alternate" type="text/html" title="Light and Magic" /><published>2019-01-08T20:31:49+01:00</published><updated>2019-01-08T20:31:49+01:00</updated><id>https://notfiles.xyz/2019/01/08/light-and-magic</id><content type="html" xml:base="https://notfiles.xyz/2019/01/08/light-and-magic/"><![CDATA[<p><img src="/img/2019/01/room-without-falloff.png" alt="Room with a Window" class="right" />
Made some refinements to lighting. Originially there was only a point light without distance falloff, which is not an accurate light model in any case. The light inside the room lights the entire world, all the way to the horizon.</p>

<p>To improve on the situation I rewrote the light model from scratch, keeping the original point light as a wrapper for simplified testing of the shading model.</p>

<p><img src="/img/2019/01/room-with-window.png" alt="Room with a Window" class="right" />
Two new kinds of lights, a <code class="language-plaintext highlighter-rouge">parallel</code> light that simulates an infinitely distant light source, so the incoming light rays are perfectly parallel and only have a direction. The other is a <code class="language-plaintext highlighter-rouge">spherical</code> light, which is a positional light source that radiates spherically, so intensity falls off with distance.</p>

<p>While I was at it, I refactored bits of the object hierarchy to enable light sources to be transformed and grouped just like any other object in the scene, so we can make reusable lamps.</p>

<div class="language-ruby clear highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shape</span><span class="p">.</span><span class="nf">group</span> <span class="ss">:ceiling_lamp</span> <span class="k">do</span> <span class="o">|</span><span class="n">lit</span> <span class="o">=</span> <span class="kp">true</span><span class="o">|</span>
  <span class="n">light</span><span class="p">.</span><span class="nf">spherical</span> <span class="p">{</span> <span class="n">falloff</span> <span class="mf">0.1</span> <span class="p">}</span> <span class="k">if</span> <span class="n">lit</span>
  <span class="n">shape</span><span class="p">.</span><span class="nf">sphere</span> <span class="k">do</span>
    <span class="n">scale</span> <span class="mf">0.1</span>
    <span class="n">material</span> <span class="k">do</span>
      <span class="n">color</span> <span class="ss">:white</span>
      <span class="n">ambient</span> <span class="mf">0.8</span>
      <span class="n">diffuse</span> <span class="mi">0</span>
      <span class="n">phong</span> <span class="mi">0</span>
    <span class="k">end</span>
    <span class="n">shadows</span> <span class="kp">false</span>
  <span class="k">end</span>
  <span class="n">shape</span><span class="p">.</span><span class="nf">cylinder</span> <span class="k">do</span>
    <span class="n">material</span> <span class="ss">:shiny_metal</span>
    <span class="n">scale</span> <span class="mf">0.01</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">0.01</span>
    <span class="n">translate</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mi">0</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="raytracerchallenge" /><category term="ruby" /><category term="hourofcode" /><summary type="html"><![CDATA[Made some refinements to lighting. Originially there was only a point light without distance falloff, which is not an accurate light model in any case. The light inside the room lights the entire world, all the way to the horizon.]]></summary></entry><entry><title type="html">Cache is King</title><link href="https://notfiles.xyz/2019/01/06/cache-is-king/" rel="alternate" type="text/html" title="Cache is King" /><published>2019-01-06T20:46:24+01:00</published><updated>2019-01-06T20:46:24+01:00</updated><id>https://notfiles.xyz/2019/01/06/cache-is-king</id><content type="html" xml:base="https://notfiles.xyz/2019/01/06/cache-is-king/"><![CDATA[<p>Cut teapot rendering time in half with some clever caching.</p>

<p>Grouped shapes would transform intersecting rays by first asking their parent to transform it, recursively until the outermost group is reached. This caused a lot of unneccessary 4x4 matrix multiplications. Instead, the shape creates a cached  world-to-local space transform by asking its parent for their world-to-local transform and multiplying by its own. Down to one 4x4 matrix multiplication per ray intersection test instead of the nesting depth of groups-within-groups.</p>

<p>Even worse, when transforming normal vectors for a hit recursively back to world space through all nested groups, there was not only an unneccessary 4x4 matrix multiplication, but also a vector normalization.</p>

<p>While I was at it I made sure that matrix operations on the identity matrix are actually no-ops, which shaved another 20% from the rendering time.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="raytracerchallenge" /><category term="hourofcode" /><category term="ruby" /><summary type="html"><![CDATA[Cut teapot rendering time in half with some clever caching.]]></summary></entry><entry><title type="html">Day 36, Constructive Solid Geometry</title><link href="https://notfiles.xyz/2019/01/05/day-36-constructive-solid-geometry/" rel="alternate" type="text/html" title="Day 36, Constructive Solid Geometry" /><published>2019-01-05T13:05:22+01:00</published><updated>2019-01-05T13:05:22+01:00</updated><id>https://notfiles.xyz/2019/01/05/day-36-constructive-solid-geometry</id><content type="html" xml:base="https://notfiles.xyz/2019/01/05/day-36-constructive-solid-geometry/"><![CDATA[<p>The final pre-defined feature of the project is done, <a href="https://en.wikipedia.org/wiki/Constructive_solid_geometry">Constructive Solid Geometry</a>, implementing the boolean set operations <code class="language-plaintext highlighter-rouge">union</code>, <code class="language-plaintext highlighter-rouge">intersection</code>, and <code class="language-plaintext highlighter-rouge">difference</code> for solid geometries. This way we can use the basic geometric surface shapes to create more advanced shapes, without resorting to approximating by thousands of triangles.</p>

<p class="clear"><img src="/img/2019/01/csg-union.png" alt="Union" class="left" />
The CSG union operation joins the surface of two shapes, such that the outer geometry is preserved, but the overlapping geometry on the inside is removed, constructing a new surface.</p>

<p class="clear"><img src="/img/2019/01/csg-intersection.png" alt="Intersection" class="left" />
The CSG intersection operation does the opposite of the union, preserving only the overlapping geometry. That’s why the colors switch sides, because the remaining surface geometries belong to the opposite side spheres.</p>

<p class="clear"><img src="/img/2019/01/csg-difference.png" alt="Difference" class="left" />
The last of the operations, CSG difference, removes the intersection from the left sphere, again leaving the surface of the right sphere exposed in the cut.</p>

<p class="clear"><img src="/img/2019/01/dice.png" alt="Dice" class="right" />
With some clever arrangement of CSG operations we can create some pretty complex geometry from just some cylinders and spheres.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="raytracerchallenge" /><category term="hourofcode" /><category term="ruby" /><summary type="html"><![CDATA[The final pre-defined feature of the project is done, Constructive Solid Geometry, implementing the boolean set operations union, intersection, and difference for solid geometries. This way we can use the basic geometric surface shapes to create more advanced shapes, without resorting to approximating by thousands of triangles.]]></summary></entry><entry><title type="html">Day 33, Domain-Specific Language</title><link href="https://notfiles.xyz/2019/01/02/day-33-domain-specific-language/" rel="alternate" type="text/html" title="Day 33, Domain-Specific Language" /><published>2019-01-02T23:39:22+01:00</published><updated>2019-01-02T23:39:22+01:00</updated><id>https://notfiles.xyz/2019/01/02/day-33-domain-specific-language</id><content type="html" xml:base="https://notfiles.xyz/2019/01/02/day-33-domain-specific-language/"><![CDATA[<p>Not a single feature improvement today, but instead a bit of quality of life improvements.</p>

<p>One of the great things about modern dynamic introspective languages is that it’s very easy to create a <a href="https://en.wikipedia.org/wiki/Domain-specific_language">domain-specific language</a> for a project like this, to make a scene description be less like pages of complicated code, and more like a reasonably fluent declarative description of the objects in the scene.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">material</span> <span class="ss">:glazed_ceramic</span> <span class="k">do</span>
  <span class="n">color</span> <span class="n">rgb</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">,</span> <span class="mf">0.5</span>
  <span class="n">ambient</span> <span class="mf">0.3</span>
  <span class="n">diffuse</span> <span class="mf">0.7</span>
  <span class="n">phong</span> <span class="mf">0.9</span><span class="p">,</span> <span class="mi">300</span>
  <span class="n">reflective</span> <span class="mf">0.1</span>
<span class="k">end</span>

<span class="n">shape</span><span class="p">.</span><span class="nf">mesh</span> <span class="ss">:utah_teapot</span> <span class="k">do</span> <span class="o">|</span><span class="n">version</span> <span class="o">=</span> <span class="s1">'hi'</span><span class="o">|</span>
  <span class="n">file</span> <span class="s2">"teapot-</span><span class="si">#{</span><span class="n">version</span><span class="si">}</span><span class="s2">.obj"</span>
  <span class="n">material</span> <span class="ss">:glazed_ceramic</span>
  <span class="n">rotate</span> <span class="ss">x: </span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="mi">4</span><span class="n">r</span>
  <span class="n">scale</span> <span class="mi">1</span><span class="o">/</span><span class="mi">16</span><span class="n">r</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The top-level declarations creates methods on the appropriate classes so they can be called by reference later on to create the concrete model objects dynamically, and does more or less the same as the previous raw API code:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">setup_teapot</span><span class="p">(</span><span class="n">world</span><span class="p">,</span> <span class="n">version</span><span class="p">)</span>
  <span class="n">world</span> <span class="o">&lt;&lt;</span> <span class="no">ObjFile</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">__dir__</span> <span class="o">+</span> <span class="s2">"/teapot-</span><span class="si">#{</span><span class="n">version</span><span class="si">}</span><span class="s2">.obj"</span><span class="p">))</span> <span class="k">do</span> <span class="o">|</span><span class="n">g</span><span class="o">|</span>
    <span class="n">g</span><span class="p">.</span><span class="nf">transform</span> <span class="o">=</span> <span class="n">identity</span><span class="p">.</span><span class="nf">rotate_x</span><span class="p">(</span><span class="s1">'-1/4'</span><span class="p">.</span><span class="nf">to_r</span><span class="p">)</span>
                          <span class="p">.</span><span class="nf">scale</span><span class="p">(</span><span class="s1">'1/16'</span><span class="p">.</span><span class="nf">to_r</span><span class="p">)</span>
    <span class="n">g</span><span class="p">.</span><span class="nf">material</span> <span class="o">=</span> <span class="no">Material</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
      <span class="n">m</span><span class="p">.</span><span class="nf">color</span> <span class="o">=</span> <span class="no">Color</span><span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">]</span>
      <span class="n">m</span><span class="p">.</span><span class="nf">shininess</span> <span class="o">=</span> <span class="mi">300</span>
      <span class="n">m</span><span class="p">.</span><span class="nf">diffuse</span> <span class="o">=</span> <span class="mf">0.7</span>
      <span class="n">m</span><span class="p">.</span><span class="nf">ambient</span> <span class="o">=</span> <span class="mf">0.3</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[Not a single feature improvement today, but instead a bit of quality of life improvements.]]></summary></entry><entry><title type="html">Day 32, Smoothly interpolated normals</title><link href="https://notfiles.xyz/2019/01/01/day-32-smoothly-interpolated-normals/" rel="alternate" type="text/html" title="Day 32, Smoothly interpolated normals" /><published>2019-01-01T21:12:40+01:00</published><updated>2019-01-01T21:12:40+01:00</updated><id>https://notfiles.xyz/2019/01/01/day-32-smoothly-interpolated-normals</id><content type="html" xml:base="https://notfiles.xyz/2019/01/01/day-32-smoothly-interpolated-normals/"><![CDATA[<p><img src="/img/2019/01/smooth-teapot.png" alt="Smooth Utah Teapot" class="right" /></p>

<p>Devember has officially ended, but there are still a few more things left to do, so I’ll keep on in the same spirit until the project is finished.</p>

<p>The <a href="/2018/12/31/day-31-optimizing-triangles/">high-poly teapot</a> still looked quite chunky with its flat polygon rendering, but with a little normal interpolation we can simulate a perfectly smooth surface.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Tea, Cocktails, and a Happy New Year</title><link href="https://notfiles.xyz/2019/01/01/tea-cocktails-and-a-happy-new-year/" rel="alternate" type="text/html" title="Tea, Cocktails, and a Happy New Year" /><published>2019-01-01T00:00:15+01:00</published><updated>2019-01-01T00:00:15+01:00</updated><id>https://notfiles.xyz/2019/01/01/tea-cocktails-and-a-happy-new-year</id><content type="html" xml:base="https://notfiles.xyz/2019/01/01/tea-cocktails-and-a-happy-new-year/"><![CDATA[<p><img src="/img/2018/12/teapot-and-cocktails.png" alt="Tea and Cocktails" /></p>

<p>Let’s have some tea and cocktails to celebrate the end of 2018.</p>]]></content><author><name>Calle Englund</name></author><category term="discord" /><category term="celebration" /><category term="raytracerchallenge" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Day 31, Optimizing triangles</title><link href="https://notfiles.xyz/2018/12/31/day-31-optimizing-triangles/" rel="alternate" type="text/html" title="Day 31, Optimizing triangles" /><published>2018-12-31T12:19:26+01:00</published><updated>2018-12-31T12:19:26+01:00</updated><id>https://notfiles.xyz/2018/12/31/day-31-optimizing-triangles</id><content type="html" xml:base="https://notfiles.xyz/2018/12/31/day-31-optimizing-triangles/"><![CDATA[<p><img src="/img/2018/12/teapot-reflection.png" alt="Utah teapot in reflective room" class="right" />
Triangle rendering was painfully slow, as mentioned <a href="/2018/12/30/day-30-triangles/">yesterday</a>. Putting a little reflective shine on the floor and walls of the room took rendering time past 90 minutes. After a bit of research i tried a binary <a href="https://en.wikipedia.org/wiki/Bounding_volume_hierarchy">bounding volume hierarchy</a>, dividing the list of shapes into subtrees, split evenly on the largest axis of the bounding box, recursively. This way we get a spacially balanced binary tree with the actual shapes as leaves, and theoretically get \(O(log\ n)\) instead of \(O(n)\) search time per ray. Huge difference, especially with rays branching recursively for reflections and refractions. Down from 90 to 6 minutes for the same scene.</p>

<p><img src="/img/2018/12/teapot-hi.png" alt="High-poly Utah teapot" class="right" />
<em>Edit:</em> As a surprise bonus, the high polygon version only took 11 minutes.</p>

<p>This marks the end of Devember 2018, but there’s still some more work to do on the raytracer before I let it go. The flat shading of triangles needs some normal interpolation, and the primitive volumes needs some <a href="https://en.wikipedia.org/wiki/Constructive_solid_geometry">constructive solid geometry</a> operations to really shine.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[Triangle rendering was painfully slow, as mentioned yesterday. Putting a little reflective shine on the floor and walls of the room took rendering time past 90 minutes. After a bit of research i tried a binary bounding volume hierarchy, dividing the list of shapes into subtrees, split evenly on the largest axis of the bounding box, recursively. This way we get a spacially balanced binary tree with the actual shapes as leaves, and theoretically get \(O(log\ n)\) instead of \(O(n)\) search time per ray. Huge difference, especially with rays branching recursively for reflections and refractions. Down from 90 to 6 minutes for the same scene.]]></summary></entry><entry><title type="html">Day 30, Triangles and teapots</title><link href="https://notfiles.xyz/2018/12/30/day-30-triangles/" rel="alternate" type="text/html" title="Day 30, Triangles and teapots" /><published>2018-12-30T22:53:03+01:00</published><updated>2018-12-30T22:53:03+01:00</updated><id>https://notfiles.xyz/2018/12/30/day-30-triangles</id><content type="html" xml:base="https://notfiles.xyz/2018/12/30/day-30-triangles/"><![CDATA[<p><img src="/img/2018/12/teapot.png" alt="Utah teapot" class="right" />
The last of the primitive shapes, the triangle. By them selves they’re pretty boring, but when you stick loads of them together they make pretty teapots. Very. Slowly. And quite chunky, because low-polygon model. It sums up to 240 triangles after dividing some larger polygons, and takes about 20–30 minutes to render at the whopping resulution of 320x256 and no reflections. I probably need to research some kind of <a href="https://en.wikipedia.org/wiki/Bounding_interval_hierarchy">bounding hierarchy</a> algorithm to automagically subdivide large groups of objects.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[The last of the primitive shapes, the triangle. By them selves they’re pretty boring, but when you stick loads of them together they make pretty teapots. Very. Slowly. And quite chunky, because low-polygon model. It sums up to 240 triangles after dividing some larger polygons, and takes about 20–30 minutes to render at the whopping resulution of 320x256 and no reflections. I probably need to research some kind of bounding hierarchy algorithm to automagically subdivide large groups of objects.]]></summary></entry><entry><title type="html">Day 29, Groups</title><link href="https://notfiles.xyz/2018/12/29/day-29-groups/" rel="alternate" type="text/html" title="Day 29, Groups" /><published>2018-12-29T22:34:31+01:00</published><updated>2018-12-29T22:34:31+01:00</updated><id>https://notfiles.xyz/2018/12/29/day-29-groups</id><content type="html" xml:base="https://notfiles.xyz/2018/12/29/day-29-groups/"><![CDATA[<p><img src="/img/2018/12/hexagon.png" alt="Hexagon" class="right" />
Transforming each object in the scene in global world reference space quickly becomes tiresome, so let’s introduce a new group “shape”. A group takes any number of objects and provides a common reference space for its children via its own transform. A group also helps reduce the search space in large scenes, by aggregating the bounding boxes of its children into a bounding box for the entire group. That way ray intersection tests against the children of the group only needs to happen when the group bounding box is intersected. Neat.</p>

<p>Oh, and why not let shapes inherit the material from their parent group, when they have no material of their own?</p>

<div class="language-ruby clear highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">world</span> <span class="o">&lt;&lt;</span> <span class="no">Group</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">g</span><span class="o">|</span>
  <span class="n">g</span><span class="p">.</span><span class="nf">material</span> <span class="o">=</span> <span class="no">Material</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
    <span class="n">m</span><span class="p">.</span><span class="nf">color</span> <span class="o">=</span> <span class="no">Color</span><span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">]</span>
    <span class="n">m</span><span class="p">.</span><span class="nf">shininess</span> <span class="o">=</span> <span class="mi">300</span>
    <span class="n">m</span><span class="p">.</span><span class="nf">reflective</span> <span class="o">=</span> <span class="mf">0.9</span>
  <span class="k">end</span>
  <span class="mi">0</span><span class="p">.</span><span class="nf">upto</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
    <span class="n">g</span> <span class="o">&lt;&lt;</span> <span class="n">hexagon_side</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[Transforming each object in the scene in global world reference space quickly becomes tiresome, so let’s introduce a new group “shape”. A group takes any number of objects and provides a common reference space for its children via its own transform. A group also helps reduce the search space in large scenes, by aggregating the bounding boxes of its children into a bounding box for the entire group. That way ray intersection tests against the children of the group only needs to happen when the group bounding box is intersected. Neat.]]></summary></entry><entry><title type="html">Day 28, Celebratory cocktails</title><link href="https://notfiles.xyz/2018/12/28/day-28-celebratory-cocktails/" rel="alternate" type="text/html" title="Day 28, Celebratory cocktails" /><published>2018-12-28T20:18:25+01:00</published><updated>2018-12-28T20:18:25+01:00</updated><id>https://notfiles.xyz/2018/12/28/day-28-celebratory-cocktails</id><content type="html" xml:base="https://notfiles.xyz/2018/12/28/day-28-celebratory-cocktails/"><![CDATA[<p><img src="/img/2018/12/cocktail-room.png" alt="Cocktail" class="right" />
The latest addition to the supported shapes is the cone, a deformed kind of cylinder, also optionally capped and restricted to an interval along its length. With all these things we can make a cocktail to celebrate. With all these transparent parts, it takes more than 8 minutes to render.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[The latest addition to the supported shapes is the cone, a deformed kind of cylinder, also optionally capped and restricted to an interval along its length. With all these things we can make a cocktail to celebrate. With all these transparent parts, it takes more than 8 minutes to render.]]></summary></entry><entry><title type="html">Day 27, Cylinders part 2</title><link href="https://notfiles.xyz/2018/12/27/day-27-cylinders-part-2/" rel="alternate" type="text/html" title="Day 27, Cylinders part 2" /><published>2018-12-27T21:56:28+01:00</published><updated>2018-12-27T21:56:28+01:00</updated><id>https://notfiles.xyz/2018/12/27/day-27-cylinders-part-2</id><content type="html" xml:base="https://notfiles.xyz/2018/12/27/day-27-cylinders-part-2/"><![CDATA[<p><img src="/img/2018/12/cylindric-room.png" alt="Cylindric room" class="right" />
To celebrate that cylinders can be constrained and capped at the ends, we have a remake of the <a href="/2018/12/25/day-25-cubemas/">cubemas</a> scene from a few days ago, but with today’s shiny new cylinders instead of cubes.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[To celebrate that cylinders can be constrained and capped at the ends, we have a remake of the cubemas scene from a few days ago, but with today’s shiny new cylinders instead of cubes.]]></summary></entry><entry><title type="html">Day 26, Cylinders part 1</title><link href="https://notfiles.xyz/2018/12/26/day-26-cylinders-part-1/" rel="alternate" type="text/html" title="Day 26, Cylinders part 1" /><published>2018-12-26T23:00:13+01:00</published><updated>2018-12-26T23:00:13+01:00</updated><id>https://notfiles.xyz/2018/12/26/day-26-cylinders-part-1</id><content type="html" xml:base="https://notfiles.xyz/2018/12/26/day-26-cylinders-part-1/"><![CDATA[<p>Devember is rapidly coming to an end, but so is the book. Just a few more shapes to go, and we’re done. Except the easy shapes are already done, so things get more complicated from here. Cylinders seem pretty easy, just a XZ-planar circle, extruded along the Y axis. Done. Except that it gets infinitely long that way, so it needs to be constrained. But then it’s hollow, so it needs to support optional end caps for when you need a closed cylinder and not just a very thin walled tube. So it’s not done yet, but probably new pixels tomorrow.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[Devember is rapidly coming to an end, but so is the book. Just a few more shapes to go, and we’re done. Except the easy shapes are already done, so things get more complicated from here. Cylinders seem pretty easy, just a XZ-planar circle, extruded along the Y axis. Done. Except that it gets infinitely long that way, so it needs to be constrained. But then it’s hollow, so it needs to support optional end caps for when you need a closed cylinder and not just a very thin walled tube. So it’s not done yet, but probably new pixels tomorrow.]]></summary></entry><entry><title type="html">Day 24 – 25, Cubemas</title><link href="https://notfiles.xyz/2018/12/25/day-25-cubemas/" rel="alternate" type="text/html" title="Day 24 – 25, Cubemas" /><published>2018-12-25T22:16:34+01:00</published><updated>2018-12-25T22:16:34+01:00</updated><id>https://notfiles.xyz/2018/12/25/day-25-cubemas</id><content type="html" xml:base="https://notfiles.xyz/2018/12/25/day-25-cubemas/"><![CDATA[<p><img src="/img/2018/12/cubic-room.png" alt="Cubic room" class="left" />
Oh my god, it’s full of cubes! The scene consists of 8 cubes, two for the room, five for the table, and the traditional cubemas decoration of one glass cube on the table.</p>

<p>Merry cubemas!</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[Oh my god, it’s full of cubes! The scene consists of 8 cubes, two for the room, five for the table, and the traditional cubemas decoration of one glass cube on the table.]]></summary></entry><entry><title type="html">Day 23, Cubes</title><link href="https://notfiles.xyz/2018/12/23/day-23-cubes/" rel="alternate" type="text/html" title="Day 23, Cubes" /><published>2018-12-23T23:53:48+01:00</published><updated>2018-12-23T23:53:48+01:00</updated><id>https://notfiles.xyz/2018/12/23/day-23-cubes</id><content type="html" xml:base="https://notfiles.xyz/2018/12/23/day-23-cubes/"><![CDATA[<p>All core functionality is in place, so time for more shapes. First up is cubes, the volume contained by three perpendicular pairs of parallel planes, and aligned with the axes. So planar ray intersection with each one, and pick the snuggest fit to intersect the cube. Not quite pixel ready yet, so something for tomorrow.</p>

<p>The tricky bit is that when any component of the ray direction is zero, intersections with some of the planes causes the intersection equation \(o + \overrightarrow{d}t = 0\) to divide by zero, and for near misses even zero divide by zero. Since \(0/0 \rightarrow NaN\) that is detected and replaced by \(+Inf\). The other divisions by zero gives the correct \(±Inf\) for Ruby <code class="language-plaintext highlighter-rouge">Float</code>s, so that’s fine out of the box.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">nonan_div</span><span class="p">(</span><span class="n">numerator</span><span class="p">,</span> <span class="n">denominator</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">numerator</span> <span class="o">/</span> <span class="n">denominator</span> <span class="k">unless</span> <span class="n">numerator</span><span class="p">.</span><span class="nf">zero?</span> <span class="o">&amp;&amp;</span> <span class="n">denominator</span><span class="p">.</span><span class="nf">zero?</span>

  <span class="no">Float</span><span class="o">::</span><span class="no">INFINITY</span>
<span class="k">end</span>
</code></pre></div></div>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[All core functionality is in place, so time for more shapes. First up is cubes, the volume contained by three perpendicular pairs of parallel planes, and aligned with the axes. So planar ray intersection with each one, and pick the snuggest fit to intersect the cube. Not quite pixel ready yet, so something for tomorrow.]]></summary></entry><entry><title type="html">Day 22, Murky waters</title><link href="https://notfiles.xyz/2018/12/22/day-22-murky-waters/" rel="alternate" type="text/html" title="Day 22, Murky waters" /><published>2018-12-22T22:40:42+01:00</published><updated>2018-12-22T22:40:42+01:00</updated><id>https://notfiles.xyz/2018/12/22/day-22-murky-waters</id><content type="html" xml:base="https://notfiles.xyz/2018/12/22/day-22-murky-waters/"><![CDATA[<p>Remember when we <a href="/2018/12/11/day-11-into-the-shadows/">introduced shadows</a>? Casting a ray towards the light and see if any object is in the way. Well, that’s a huge shortcut, because transparent materials. Well, why not fix that by taking another huge shortcut, and add a toggle to exclude certain objects from shadow ray casting?</p>

<p><img src="/img/2018/12/shadowatery-floor.png" alt="Murky water" />
<img src="/img/2018/12/watery-floor.png" alt="Clear water" /></p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[Remember when we introduced shadows? Casting a ray towards the light and see if any object is in the way. Well, that’s a huge shortcut, because transparent materials. Well, why not fix that by taking another huge shortcut, and add a toggle to exclude certain objects from shadow ray casting?]]></summary></entry><entry><title type="html">Day 18 – 21, Feverish Shiny Glass Pixels</title><link href="https://notfiles.xyz/2018/12/21/day-21-shiny-glass-pixels/" rel="alternate" type="text/html" title="Day 18 – 21, Feverish Shiny Glass Pixels" /><published>2018-12-21T22:08:37+01:00</published><updated>2018-12-21T22:08:37+01:00</updated><id>https://notfiles.xyz/2018/12/21/day-21-shiny-glass-pixels</id><content type="html" xml:base="https://notfiles.xyz/2018/12/21/day-21-shiny-glass-pixels/"><![CDATA[<p><img src="/img/2018/12/refractions.png" alt="Shiny Glass Pixels" class="right" /></p>

<p>Got hit with a sudden fever on Tuesday eveing, so that put a halt on things, while spending 2½ days sleeping that off. Also, refractions took more work than I had anticipated. I didn’t think about the fact that <a href="https://en.wikipedia.org/wiki/Snell&apos;s_law">Snell’s law</a> for calculating the angle of the refracted ray, only does what it says on the tin. In reality the refraction and reflection is a duality, tapering off from one to the other as you get close to the critical angle where everything is reflected, due to the <a href="https://en.wikipedia.org/wiki/Fresnel_equations">Fresnel effect</a>.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Day 17, Transparency and Refraction</title><link href="https://notfiles.xyz/2018/12/17/day-17-transparency-and-refraction/" rel="alternate" type="text/html" title="Day 17, Transparency and Refraction" /><published>2018-12-17T23:43:32+01:00</published><updated>2018-12-17T23:43:32+01:00</updated><id>https://notfiles.xyz/2018/12/17/day-17-transparency-and-refraction</id><content type="html" xml:base="https://notfiles.xyz/2018/12/17/day-17-transparency-and-refraction/"><![CDATA[<p>No new pixels today, because implementing transparency and refraction turned out to be quite a lot of work. So far I’ve made all the cases where nothing happens, and the refracted ray would be black.</p>

<ol>
  <li>The material is not transparent (trivially)</li>
  <li>The maximum recursion depth is reached and search is aborted</li>
  <li>Total internal reflection would lead to 2, but is detected early</li>
</ol>

<p>The next step, for tomorrow, should be about finding an actual color, and viewing the world through refractive distortions.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[No new pixels today, because implementing transparency and refraction turned out to be quite a lot of work. So far I’ve made all the cases where nothing happens, and the refracted ray would be black.]]></summary></entry><entry><title type="html">Day 16, Halfway there</title><link href="https://notfiles.xyz/2018/12/16/day-16-halfway-there/" rel="alternate" type="text/html" title="Day 16, Halfway there" /><published>2018-12-16T21:31:24+01:00</published><updated>2018-12-16T21:31:24+01:00</updated><id>https://notfiles.xyz/2018/12/16/day-16-halfway-there</id><content type="html" xml:base="https://notfiles.xyz/2018/12/16/day-16-halfway-there/"><![CDATA[<p>Fitting that the halfway point would be about reflections. Pagewise we’re more than halvway through the book, but I’m guessing that there will be plenty of things to do for the remaining 15 days. There’s still the going back and replacing the <a href="/2018/12/02/day-2-matrices-matrices-matrices-oh-and-more-matrices/">homebuilt algebra</a> code with stdlib, if nothing else.</p>

<p><img src="/img/2018/12/reflections.png" alt="Reflections" class="right" /></p>

<p>Reflections is just another ray to cast, from the point of reflection, and see what it hits. Whatever the reflection ray hits is blended into the Phong lighting. Recurse until satisfied.</p>

<p>Currently the recursion is aborted after a fix number of steps, but I’m pondering if it would be better so let recursion run until the contribution is small enough not to matter, and set a much higher fixed limit. That way barely reflective surfaces wont waste computation, but higly reflective surfaces, like a mirror maze, get the best possible fidelity.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[Fitting that the halfway point would be about reflections. Pagewise we’re more than halvway through the book, but I’m guessing that there will be plenty of things to do for the remaining 15 days. There’s still the going back and replacing the homebuilt algebra code with stdlib, if nothing else.]]></summary></entry><entry><title type="html">Day 15, Patterns all the way down</title><link href="https://notfiles.xyz/2018/12/15/day-15-patterns-all-the-way-down/" rel="alternate" type="text/html" title="Day 15, Patterns all the way down" /><published>2018-12-15T22:21:26+01:00</published><updated>2018-12-15T22:21:26+01:00</updated><id>https://notfiles.xyz/2018/12/15/day-15-patterns-all-the-way-down</id><content type="html" xml:base="https://notfiles.xyz/2018/12/15/day-15-patterns-all-the-way-down/"><![CDATA[<p><img src="/img/2018/12/nested-patterns.png" alt="Nested Patterns" class="right" /></p>

<p>I heard you liked patterns, so how about some patterns within your patterns, so you can pattern while you pattern?</p>

<p>Supporting nesting of the already existing patterns was not that difficult, just make colors respond to <code class="language-plaintext highlighter-rouge">#color_at(point)</code> and make a recursive call in the base class.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">color_at</span><span class="p">(</span><span class="n">point</span><span class="p">)</span>
  <span class="n">point</span> <span class="o">=</span> <span class="n">to_local</span><span class="p">(</span><span class="n">point</span><span class="p">)</span>
  <span class="n">g</span> <span class="o">=</span> <span class="n">grade</span><span class="p">(</span><span class="n">point</span><span class="p">)</span>
  <span class="n">c</span> <span class="o">=</span> <span class="vi">@pigments</span><span class="p">.</span><span class="nf">count</span> <span class="o">-</span> <span class="mi">1</span>
  <span class="n">n</span> <span class="o">=</span> <span class="n">g</span><span class="p">.</span><span class="nf">floor</span> <span class="o">%</span> <span class="n">c</span>
  <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="vi">@pigments</span><span class="p">[</span><span class="n">n</span><span class="o">..</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">].</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span><span class="p">.</span><span class="nf">color_at</span><span class="p">(</span><span class="n">point</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">a</span><span class="p">.</span><span class="nf">interpolate</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">g</span> <span class="o">%</span> <span class="mi">1</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p><img src="/img/2018/12/arithmetic-blending.png" alt="Arithmetic Blending" />
<img src="/img/2018/12/geometric-blending.png" alt="Geometric Blending" /></p>

<p>Blending arbitrary patterns with a function is just as easy, so here are the arithmethic, geometric, and quadratic mean blends of the stripy patterns nested in the checkers before. This overrides the <code class="language-plaintext highlighter-rouge">#color_at</code> method completely, and so does the next modifier pattern, as they have no base pattern on their own.</p>

<p><img src="/img/2018/12/quadratic-blending.png" alt="Quadratic Blending" />
<img src="/img/2018/12/perturbed-pattern.png" alt="Perturbations" /></p>

<p>While we’re at it, why not add a simplex noise perturbation as well for organic patterns.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Day 14, Patterns, patterns, patterns</title><link href="https://notfiles.xyz/2018/12/14/day-14-patterns-patterns-patterns/" rel="alternate" type="text/html" title="Day 14, Patterns, patterns, patterns" /><published>2018-12-14T21:16:51+01:00</published><updated>2018-12-14T21:16:51+01:00</updated><id>https://notfiles.xyz/2018/12/14/day-14-patterns-patterns-patterns</id><content type="html" xml:base="https://notfiles.xyz/2018/12/14/day-14-patterns-patterns-patterns/"><![CDATA[<p><img src="/img/2018/12/big-stripey-truth.png" alt="Big Stripey Truth" class="right" />
<img src="/img/2018/12/all-the-patterns.png" alt="All the patterns" class="right" /></p>

<p>The more, the merrier, they say, and that probably goes for patterns as well. Stripes got some more company, with gradients, concentric circles, and checkered patterns. And why constrain the number of colors in a pattern?</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">color_at</span><span class="p">(</span><span class="n">point</span><span class="p">)</span>
  <span class="n">g</span> <span class="o">=</span> <span class="n">grade</span><span class="p">(</span><span class="n">point</span><span class="p">)</span>
  <span class="n">c</span> <span class="o">=</span> <span class="vi">@pigments</span><span class="p">.</span><span class="nf">count</span> <span class="o">-</span> <span class="mi">1</span>
  <span class="nb">p</span> <span class="o">=</span> <span class="n">g</span><span class="p">.</span><span class="nf">floor</span> <span class="o">%</span> <span class="n">c</span>
  <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="vi">@pigments</span><span class="p">[</span><span class="nb">p</span><span class="o">..</span><span class="nb">p</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
  <span class="n">a</span><span class="p">.</span><span class="nf">interpolate</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">g</span> <span class="o">%</span> <span class="mi">1</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Most of the work getting the multicolor working was refactoring all the kinds of patterns I created before. Each kind of pattern implements their own version of the <code class="language-plaintext highlighter-rouge">grade</code> method, that converts a 3D point to a scalar value, and the the base class takes care of the rest. With that in place, extending patterns to taking other patterns as pigments, instead of just plain colors, should be an easy next step.</p>

<p class="clear"><em>Discrete rings</em></p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">grade</span><span class="p">(</span><span class="n">point</span><span class="p">)</span>
  <span class="no">Math</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">point</span><span class="p">.</span><span class="nf">x</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">point</span><span class="p">.</span><span class="nf">z</span><span class="o">**</span><span class="mi">2</span><span class="p">).</span><span class="nf">floor</span>
<span class="k">end</span>
</code></pre></div></div>

<p class="clear"><em>Linear gradient</em></p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">grade</span><span class="p">(</span><span class="n">point</span><span class="p">)</span>
  <span class="n">point</span><span class="p">.</span><span class="nf">x</span>
<span class="k">end</span>
</code></pre></div></div>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Day 13, Big Stripey Lie</title><link href="https://notfiles.xyz/2018/12/14/day-13-big-stripey-lie/" rel="alternate" type="text/html" title="Day 13, Big Stripey Lie" /><published>2018-12-14T00:14:12+01:00</published><updated>2018-12-14T00:14:12+01:00</updated><id>https://notfiles.xyz/2018/12/14/day-13-big-stripey-lie</id><content type="html" xml:base="https://notfiles.xyz/2018/12/14/day-13-big-stripey-lie/"><![CDATA[<p><img src="/img/2018/12/big-stripey-lie.png" alt="Big Stripey Lie" class="right" /></p>

<p>Single color objects are boring, so some color patterns would be a nice addition. Like stripes, alternating between two colors, <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code>.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">color_at</span><span class="p">(</span><span class="n">point</span><span class="p">)</span>
  <span class="p">(</span><span class="n">point</span><span class="p">.</span><span class="nf">x</span><span class="p">.</span><span class="nf">floor</span> <span class="o">%</span> <span class="mi">2</span><span class="p">).</span><span class="nf">zero?</span> <span class="p">?</span> <span class="vi">@a</span> <span class="p">:</span> <span class="vi">@b</span>
<span class="k">end</span>
</code></pre></div></div>

<p class="clear"><img src="/img/2018/12/big-stripey-truth.png" alt="Big Stripey Truth" class="left" /></p>

<p>Ok, uniform stripes all over the world is not the best thing, so they need to have transforms attached, like everything else. That’s more like it.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">color_at_object</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">point</span><span class="p">)</span>
  <span class="n">object_point</span> <span class="o">=</span> <span class="n">object</span><span class="p">.</span><span class="nf">inverse</span> <span class="o">*</span> <span class="n">point</span>
  <span class="n">pattern_point</span> <span class="o">=</span> <span class="vi">@inverse</span> <span class="o">*</span> <span class="n">object_point</span>
  <span class="n">color_at</span><span class="p">(</span><span class="n">pattern_point</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Day 12, Spheres on a plane</title><link href="https://notfiles.xyz/2018/12/12/day-12-spheres-on-a-plane/" rel="alternate" type="text/html" title="Day 12, Spheres on a plane" /><published>2018-12-12T23:08:18+01:00</published><updated>2018-12-12T23:08:18+01:00</updated><id>https://notfiles.xyz/2018/12/12/day-12-spheres-on-a-plane</id><content type="html" xml:base="https://notfiles.xyz/2018/12/12/day-12-spheres-on-a-plane/"><![CDATA[<p>Spheres are nice and all, but we need more shapes to make the world go around. So, a little bit of refactoring to get most the juicy bits from spheres apply to every kind of shape, such as planes. So flat, and infinite.</p>

<p>See, the seemingly flat floor and walls used to be very flat spheres, and not planes at all.</p>

<p><img src="/img/2018/12/spheres-on-a-disc.png" alt="Spheres on a disc" />
<img src="/img/2018/12/spheres-on-a-plane.png" alt="Spheres on a plane" /></p>

<p>While messing around with non-square aspect ratios, trying to capture the scene, I got bit by a nasty bug in the camera:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">fov</span><span class="p">)</span>
  <span class="n">aspect_ratio</span> <span class="o">=</span> <span class="n">width</span> <span class="o">/</span> <span class="n">height</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">width</code> and <code class="language-plaintext highlighter-rouge">height</code> of the camera is measured in canvas pixels, so they are integers, which caused an integer division when calculating the aspect ratio, with surprising results. Rational numbers to the resque:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">fov</span><span class="p">)</span>
  <span class="n">aspect_ratio</span> <span class="o">=</span> <span class="no">Rational</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[Spheres are nice and all, but we need more shapes to make the world go around. So, a little bit of refactoring to get most the juicy bits from spheres apply to every kind of shape, such as planes. So flat, and infinite.]]></summary></entry><entry><title type="html">Day 11, Into the Shadows</title><link href="https://notfiles.xyz/2018/12/11/day-11-into-the-shadows/" rel="alternate" type="text/html" title="Day 11, Into the Shadows" /><published>2018-12-11T22:03:54+01:00</published><updated>2018-12-11T22:03:54+01:00</updated><id>https://notfiles.xyz/2018/12/11/day-11-into-the-shadows</id><content type="html" xml:base="https://notfiles.xyz/2018/12/11/day-11-into-the-shadows/"><![CDATA[<p>After todays work we can render the shadows cast by objects in our scenes!</p>

<p>Finding out which points are in shadow is actually pretty neat, just cast a ray toward the light, and see if it hits anything else on the way. If the light is obscured, the point just gets ambiant light. When lit by multiple lights, the whole thing is just done separately for each light, and added in the end.</p>

<p><img src="/img/2018/12/corner-spheres.png" alt="Cornered Spheres" />
<img src="/img/2018/12/sphere-shadows.png" alt="Spheres with Shadows" />
<img src="/img/2018/12/multi-shadow-spheres.png" alt="Multi-light Shadows" /></p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[After todays work we can render the shadows cast by objects in our scenes!]]></summary></entry><entry><title type="html">Day 10, A world full of spheres</title><link href="https://notfiles.xyz/2018/12/10/day-10-a-world-full-of-spheres/" rel="alternate" type="text/html" title="Day 10, A world full of spheres" /><published>2018-12-10T17:48:40+01:00</published><updated>2018-12-10T17:48:40+01:00</updated><id>https://notfiles.xyz/2018/12/10/day-10-a-world-full-of-spheres</id><content type="html" xml:base="https://notfiles.xyz/2018/12/10/day-10-a-world-full-of-spheres/"><![CDATA[<p>With the development environment fixed, using the previous progress to render a world with multiple is as simple as creating the camera:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">camera</span> <span class="o">=</span> <span class="no">Camera</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="s1">'1/4'</span><span class="p">.</span><span class="nf">to_r</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">camera</span><span class="o">|</span>
    <span class="n">origin</span> <span class="o">=</span> <span class="no">Point</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.7</span><span class="p">]</span>
    <span class="n">look_at</span> <span class="o">=</span> <span class="no">Point</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
    <span class="n">up</span> <span class="o">=</span> <span class="no">Vector</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
    <span class="n">camera</span><span class="p">.</span><span class="nf">transform</span> <span class="o">=</span> <span class="no">ViewTransform</span><span class="p">[</span><span class="n">origin</span><span class="p">,</span> <span class="n">look_at</span><span class="p">,</span> <span class="n">up</span><span class="p">]</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Populating a world with some objects:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">world</span> <span class="o">=</span> <span class="no">World</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">world</span><span class="o">|</span>
    <span class="n">world</span><span class="p">.</span><span class="nf">objects</span> <span class="o">&lt;&lt;</span> <span class="no">Sphere</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">sphere</span><span class="o">|</span>
        <span class="n">sphere</span><span class="p">.</span><span class="nf">material</span><span class="p">.</span><span class="nf">color</span> <span class="o">=</span> <span class="no">Color</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">]</span>
        <span class="n">sphere</span><span class="p">.</span><span class="nf">transform</span> <span class="o">=</span> <span class="n">identity</span><span class="p">.</span><span class="nf">translate</span><span class="p">(</span><span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="n">world</span><span class="p">.</span><span class="nf">objects</span> <span class="o">&lt;&lt;</span> <span class="no">Sphere</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">sphere</span><span class="o">|</span>
        <span class="n">sphere</span><span class="p">.</span><span class="nf">material</span><span class="p">.</span><span class="nf">color</span> <span class="o">=</span> <span class="no">Color</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">]</span>
        <span class="n">sphere</span><span class="p">.</span><span class="nf">material</span><span class="p">.</span><span class="nf">shininess</span> <span class="o">=</span> <span class="mi">20</span>
        <span class="n">sphere</span><span class="p">.</span><span class="nf">transform</span> <span class="o">=</span> <span class="n">identity</span><span class="p">.</span><span class="nf">translate</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="n">world</span><span class="p">.</span><span class="nf">objects</span> <span class="o">&lt;&lt;</span> <span class="no">Sphere</span><span class="p">.</span><span class="nf">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">sphere</span><span class="o">|</span>
        <span class="n">sphere</span><span class="p">.</span><span class="nf">material</span><span class="p">.</span><span class="nf">color</span> <span class="o">=</span> <span class="no">Color</span><span class="p">[</span><span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">]</span>
        <span class="n">sphere</span><span class="p">.</span><span class="nf">transform</span> <span class="o">=</span> <span class="n">identity</span><span class="p">.</span><span class="nf">scale</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">).</span><span class="nf">translate</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>And finally rendering the result to an image file.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">File</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="s1">'spheres.ppm'</span><span class="p">,</span> <span class="s1">'w'</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
    <span class="n">camera</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span><span class="n">world</span><span class="p">).</span><span class="nf">to_ppm</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p><img src="/img/2018/12/spheres.png" alt="Spheres" /></p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[With the development environment fixed, using the previous progress to render a world with multiple is as simple as creating the camera:]]></summary></entry><entry><title type="html">Day 9, lost to Ruby environment trouble</title><link href="https://notfiles.xyz/2018/12/10/day-9-lost-to-ruby-environment-trouble/" rel="alternate" type="text/html" title="Day 9, lost to Ruby environment trouble" /><published>2018-12-10T17:29:50+01:00</published><updated>2018-12-10T17:29:50+01:00</updated><id>https://notfiles.xyz/2018/12/10/day-9-lost-to-ruby-environment-trouble</id><content type="html" xml:base="https://notfiles.xyz/2018/12/10/day-9-lost-to-ruby-environment-trouble/"><![CDATA[<p>No progress because it turned out that the Ruby / bundler environment on my laptop was not functional anymore, so the little time I had while away over the weekend got wasted on debugging why nothing worked instead of doing something productive.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="ruby" /><summary type="html"><![CDATA[No progress because it turned out that the Ruby / bundler environment on my laptop was not functional anymore, so the little time I had while away over the weekend got wasted on debugging why nothing worked instead of doing something productive.]]></summary></entry><entry><title type="html">Day 8, Making a scene</title><link href="https://notfiles.xyz/2018/12/08/day-8-making-a-scene/" rel="alternate" type="text/html" title="Day 8, Making a scene" /><published>2018-12-08T17:00:00+01:00</published><updated>2018-12-08T17:00:00+01:00</updated><id>https://notfiles.xyz/2018/12/08/day-8-making-a-scene</id><content type="html" xml:base="https://notfiles.xyz/2018/12/08/day-8-making-a-scene/"><![CDATA[<p>Further steps toward more pixels, teaching the world to tell what color a ray will see, and creating the necessary transforms for positioning the world in front of the camera. Then have the camera cast a ray, for each pixel in the resulting image, into the world.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[Further steps toward more pixels, teaching the world to tell what color a ray will see, and creating the necessary transforms for positioning the world in front of the camera. Then have the camera cast a ray, for each pixel in the resulting image, into the world.]]></summary></entry><entry><title type="html">Day 7, Casting rays through the whole world</title><link href="https://notfiles.xyz/2018/12/07/day-7-casting-rays-through-the-whole-world/" rel="alternate" type="text/html" title="Day 7, Casting rays through the whole world" /><published>2018-12-07T21:41:39+01:00</published><updated>2018-12-07T21:41:39+01:00</updated><id>https://notfiles.xyz/2018/12/07/day-7-casting-rays-through-the-whole-world</id><content type="html" xml:base="https://notfiles.xyz/2018/12/07/day-7-casting-rays-through-the-whole-world/"><![CDATA[<p>Lots of refactoring today, because old assumptions were smashed, and some cleanup of annoying duplications was needed. No new pixels yet, but maybe tomorrow? These where the previous two days pixel results, with the black background made transparent while converting them from <code class="language-plaintext highlighter-rouge">ppm</code> to <code class="language-plaintext highlighter-rouge">png</code>.</p>

<p><img src="/img/2018/12/sphere.png" alt="Flat Sphere" />
<img src="/img/2018/12/lit-sphere.png" alt="Phong Sphere" /></p>

<p>Casting a ray through the world is as simple as casting it through every object in the world, and collating the resulting intersections.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><summary type="html"><![CDATA[Lots of refactoring today, because old assumptions were smashed, and some cleanup of annoying duplications was needed. No new pixels yet, but maybe tomorrow? These where the previous two days pixel results, with the black background made transparent while converting them from ppm to png.]]></summary></entry><entry><title type="html">Day 6, Shadows, Light and Magic</title><link href="https://notfiles.xyz/2018/12/06/day-6-shadows-light-and-magic/" rel="alternate" type="text/html" title="Day 6, Shadows, Light and Magic" /><published>2018-12-06T09:19:12+01:00</published><updated>2018-12-06T09:19:12+01:00</updated><id>https://notfiles.xyz/2018/12/06/day-6-shadows-light-and-magic</id><content type="html" xml:base="https://notfiles.xyz/2018/12/06/day-6-shadows-light-and-magic/"><![CDATA[<p>More than just hit detection, we’ve moved into the realm of reflection, lighting and shading. This is mainly about projecting vectors on other vectors, using dot products \(\overrightarrow{v1} \cdot \overrightarrow{v2}\) to measure the length of the projection. For that we need to find normal vectors of surfaces, and a light source.</p>

<p>The point light source is simple enough, just a position and an intensity.</p>

\[light = (\dot{p}, i_{rgb})\]

<p>The <a href="https://en.wikipedia.org/wiki/Normal_(geometry)">normal</a> at a point of a unit sphere is also simple, it’s the same as the vector from the center to the point on the sphere.</p>

\[\overrightarrow{v}_{normal} = \dot{p}_{sphere} - \dot{p}_{origin}\]

<p>That’s in object space. The actual calculation in world space is a bit more convoluted, because we have transforms attached to the unit spheres, so a few inverse transforms are needed to counter the deformation.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">normal_at</span><span class="p">(</span><span class="n">world_point</span><span class="p">)</span>
  <span class="n">object_point</span> <span class="o">=</span> <span class="vi">@inverse</span> <span class="o">*</span> <span class="n">world_point</span>
  <span class="n">object_normal</span> <span class="o">=</span> <span class="n">object_point</span> <span class="o">-</span> <span class="no">Point</span><span class="o">::</span><span class="no">ZERO</span>
  <span class="n">world_normal</span> <span class="o">=</span> <span class="vi">@inverse_transpose</span> <span class="o">*</span> <span class="n">object_normal</span>
  <span class="n">world_normal</span><span class="p">.</span><span class="nf">normalize</span>
<span class="k">end</span>
</code></pre></div></div>

<p>With that in place we can calculate the shade where the ray hits a sphere, by using the <a href="https://en.wikipedia.org/wiki/Phong_reflection_model">Phong reflection</a> model.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[More than just hit detection, we’ve moved into the realm of reflection, lighting and shading. This is mainly about projecting vectors on other vectors, using dot products \(\overrightarrow{v1} \cdot \overrightarrow{v2}\) to measure the length of the projection. For that we need to find normal vectors of surfaces, and a light source.]]></summary></entry><entry><title type="html">Day 5, Assume nothing</title><link href="https://notfiles.xyz/2018/12/05/day-5-bumping-in-to-things/" rel="alternate" type="text/html" title="Day 5, Assume nothing" /><published>2018-12-05T10:45:08+01:00</published><updated>2018-12-05T10:45:08+01:00</updated><id>https://notfiles.xyz/2018/12/05/day-5-bumping-in-to-things</id><content type="html" xml:base="https://notfiles.xyz/2018/12/05/day-5-bumping-in-to-things/"><![CDATA[<p><em>Today I Learned</em> that I shouldn’t have assumed the sphere would ever need to change from being a unit sphere, so intersecting gets even simpler:</p>

\[\|\dot{O} + t\overrightarrow{D}\|^2 - 1 = 0\]

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">intersect</span><span class="p">(</span><span class="n">ray</span><span class="p">)</span>
  <span class="n">l</span> <span class="o">=</span> <span class="n">ray</span><span class="p">.</span><span class="nf">origin</span> <span class="o">-</span> <span class="no">Point</span><span class="o">::</span><span class="no">ZERO</span>
  <span class="n">d</span> <span class="o">=</span> <span class="n">ray</span><span class="p">.</span><span class="nf">direction</span>
  <span class="n">a</span> <span class="o">=</span> <span class="n">d</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
  <span class="n">b</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">d</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">c</span> <span class="o">=</span> <span class="n">l</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>

  <span class="n">intersections</span> <span class="o">=</span> <span class="n">quadratic</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">).</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="no">Intersection</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="nb">self</span><span class="p">)</span> <span class="p">}</span>
  <span class="no">Intersections</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="o">*</span><span class="n">intersections</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>You might wonder why subtract the zero point from the ray origin. \(x - 0 = x\), right? Wrong! \(\dot{p_1} - \dot{p_0} = \overrightarrow{v_1}\), subtracting points yields a vector, due to that neat trick I mentioned on <a href="/2018/11/30/day-0-tuple-basics/">the 0:th day</a>, and \(v_1 \cdot v_2\) is only valid for vectors, not points.</p>

<p>See, a point has w = 1, and a vector has w = 0</p>

\[\begin{bmatrix}
x1 \\ y1 \\ z1 \\ 1
\end{bmatrix}
-
\begin{bmatrix}
x0 \\ y0 \\ z0 \\ 1
\end{bmatrix}
=
\begin{bmatrix}
x1 \\ y1 \\ z1 \\ 0
\end{bmatrix}\]

<p>Like ma<del>gic</del>th.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[Today I Learned that I shouldn’t have assumed the sphere would ever need to change from being a unit sphere, so intersecting gets even simpler:]]></summary></entry><entry><title type="html">Day 4, Intersections</title><link href="https://notfiles.xyz/2018/12/04/day-4-intersections/" rel="alternate" type="text/html" title="Day 4, Intersections" /><published>2018-12-04T23:34:42+01:00</published><updated>2018-12-04T23:34:42+01:00</updated><id>https://notfiles.xyz/2018/12/04/day-4-intersections</id><content type="html" xml:base="https://notfiles.xyz/2018/12/04/day-4-intersections/"><![CDATA[<p>More math heavy stuff, calculating the positions along a ray, where it intersects a sphere. Turns out this is as simple as solving a quadratic equation, with some special coefficients.</p>

\[\|\dot{O} + t\overrightarrow{D} - \dot{C}\|^2 = R^2\]

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">intersect</span><span class="p">(</span><span class="n">ray</span><span class="p">)</span>
  <span class="n">sphere_to_ray</span> <span class="o">=</span> <span class="n">ray</span><span class="p">.</span><span class="nf">origin</span> <span class="o">-</span> <span class="vi">@origin</span>
  <span class="n">a</span> <span class="o">=</span> <span class="n">ray</span><span class="p">.</span><span class="nf">direction</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">ray</span><span class="p">.</span><span class="nf">direction</span><span class="p">)</span>
  <span class="n">b</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">ray</span><span class="p">.</span><span class="nf">direction</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">sphere_to_ray</span><span class="p">)</span>
  <span class="n">c</span> <span class="o">=</span> <span class="n">sphere_to_ray</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">sphere_to_ray</span><span class="p">)</span> <span class="o">-</span> <span class="vi">@radius_squared</span>

  <span class="n">intersections</span> <span class="o">=</span> <span class="n">quadratic</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">).</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="no">Intersection</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="nb">self</span><span class="p">)</span> <span class="p">}</span>
  <span class="no">Intersections</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="o">*</span><span class="n">intersections</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<p>I also had to refactor the symbolic evaluation helpers I use to evaluate the <a href="https://docs.cucumber.io/gherkin/reference/">gherkin</a> expressions that makes up the specification.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">seval</span><span class="p">(</span><span class="n">recv</span><span class="p">,</span> <span class="nb">method</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
  <span class="k">case</span> <span class="nb">method</span>
  <span class="k">when</span> <span class="ss">:'='</span>
    <span class="nb">instance_variable_set</span><span class="p">(</span><span class="n">recv</span><span class="p">,</span> <span class="n">seval</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">))</span>
  <span class="k">when</span> <span class="kp">nil</span>
    <span class="n">recv</span><span class="p">.</span><span class="nf">is_a?</span><span class="p">(</span><span class="no">Symbol</span><span class="p">)</span> <span class="p">?</span> <span class="nb">instance_variable_get</span><span class="p">(</span><span class="n">recv</span><span class="p">)</span> <span class="p">:</span> <span class="n">recv</span>
  <span class="k">else</span>
    <span class="n">fcall</span><span class="p">(</span><span class="n">map_operator</span><span class="p">(</span><span class="nb">method</span><span class="p">),</span> <span class="n">recv</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">fcall</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
  <span class="nb">method</span><span class="p">.</span><span class="nf">to_proc</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">.</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg</span><span class="o">|</span>
    <span class="n">arg</span><span class="p">.</span><span class="nf">is_a?</span><span class="p">(</span><span class="no">Symbol</span><span class="p">)</span> <span class="p">?</span> <span class="nb">instance_variable_get</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span> <span class="p">:</span> <span class="n">arg</span>
  <span class="k">end</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><summary type="html"><![CDATA[More math heavy stuff, calculating the positions along a ray, where it intersects a sphere. Turns out this is as simple as solving a quadratic equation, with some special coefficients.]]></summary></entry><entry><title type="html">Day 3, Casting rays into spheres</title><link href="https://notfiles.xyz/2018/12/03/day-3-casting-rays-into-spheres/" rel="alternate" type="text/html" title="Day 3, Casting rays into spheres" /><published>2018-12-03T23:30:11+01:00</published><updated>2018-12-03T23:30:11+01:00</updated><id>https://notfiles.xyz/2018/12/03/day-3-casting-rays-into-spheres</id><content type="html" xml:base="https://notfiles.xyz/2018/12/03/day-3-casting-rays-into-spheres/"><![CDATA[<p>Finally some practical applications of the math heavy weekend, casting abstract rays at abstract spheres. Well, on a sliding scale from linear algebra to physical representation, it’s still a step in the direction.</p>

<p>More reasonable pace, now that we’ve entered the workdays part of the week, with just an hour of coding-while-breakfast, that I didn’t realize I had missed so much. It must have been during Devember 2016, while I was at a conference for a third of it, and because westward transatlantic jetlag was awake a few hours ahead of the conference schedule. I sat in the hotel lobby, eating expensive and not that good nuked oatmeal for breakfast, and working on my Devember project. That Devember project didn’t work out, but that week was great.</p>

<p>Oh, back to <a href="https://en.wikipedia.org/wiki/Line–sphere_intersection">casting rays at spheres</a>. I guess this can’t stay around forever:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Sphere</span>
  <span class="o">...</span>
  <span class="k">def</span> <span class="nf">intersect</span><span class="p">(</span><span class="n">_ray</span><span class="p">)</span>
    <span class="k">raise</span> <span class="no">NotImplementedError</span>
  <span class="k">end</span>
  <span class="o">...</span>
<span class="k">end</span>
</code></pre></div></div>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[Finally some practical applications of the math heavy weekend, casting abstract rays at abstract spheres. Well, on a sliding scale from linear algebra to physical representation, it’s still a step in the direction.]]></summary></entry><entry><title type="html">Day 2, Matrices, matrices, matrices. Oh, and more matrices</title><link href="https://notfiles.xyz/2018/12/02/day-2-matrices-matrices-matrices-oh-and-more-matrices/" rel="alternate" type="text/html" title="Day 2, Matrices, matrices, matrices. Oh, and more matrices" /><published>2018-12-02T23:45:24+01:00</published><updated>2018-12-02T23:45:24+01:00</updated><id>https://notfiles.xyz/2018/12/02/day-2-matrices-matrices-matrices-oh-and-more-matrices</id><content type="html" xml:base="https://notfiles.xyz/2018/12/02/day-2-matrices-matrices-matrices-oh-and-more-matrices/"><![CDATA[<p>Today was spent on a heavy chunk of <a href="https://en.wikipedia.org/wiki/Linear_algebra">linear algebra</a>, matrices. This is the foundation for everything else, so time well spent reimplementing what’s already in the stdlib, just to refresh my math skills. If there are still days left of Devember when I’m finished, I’ll come back and replace all this with the stdlib implementation instead, hoping I’m somewhat close to the same API.</p>

<p>The next natural step, was defining the different transformations needed for all vector space calculations, and also happened to be the next chapter in the book.</p>

<p>Now we’re almost ready for some real action.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">p</span> <span class="o">=</span> <span class="no">Point</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
<span class="no">T</span> <span class="o">=</span> <span class="n">identity</span><span class="p">.</span><span class="nf">rotate_x</span><span class="p">(</span><span class="mf">0.25</span><span class="p">)</span> <span class="c1"># We're counting rotation in units of τ</span>
<span class="no">T</span> <span class="o">*</span> <span class="nb">p</span>
<span class="o">=&gt;</span> <span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="ruby" /><category term="raytracerchallenge" /><category term="tauism" /><summary type="html"><![CDATA[Today was spent on a heavy chunk of linear algebra, matrices. This is the foundation for everything else, so time well spent reimplementing what’s already in the stdlib, just to refresh my math skills. If there are still days left of Devember when I’m finished, I’ll come back and replace all this with the stdlib implementation instead, hoping I’m somewhat close to the same API.]]></summary></entry><entry><title type="html">Day 1, Overdoing it</title><link href="https://notfiles.xyz/2018/12/01/day-1-overdoing-it/" rel="alternate" type="text/html" title="Day 1, Overdoing it" /><published>2018-12-01T19:51:19+01:00</published><updated>2018-12-01T19:51:19+01:00</updated><id>https://notfiles.xyz/2018/12/01/day-1-overdoing-it</id><content type="html" xml:base="https://notfiles.xyz/2018/12/01/day-1-overdoing-it/"><![CDATA[<p>The first proper day of Devember is here. Of course I overdid it and spent all day coding, instead of just that one hour.</p>

<p>I had intended to finish the first chapter, with arithmetic operations on vectors, and points, all being represented by that single <code class="language-plaintext highlighter-rouge">Tuple</code> class I made yesterday. A large part of that was refactoring the test infrastructure, which is to be expected this early, I guess.</p>

<p>Then I got carried away, and finished the second chapter too, implementing colors, represented by the same <code class="language-plaintext highlighter-rouge">Tuple</code> class, and a drawable canvas, that can export itself in PPM format.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><category term="raytracerchallenge" /><category term="ruby" /><summary type="html"><![CDATA[The first proper day of Devember is here. Of course I overdid it and spent all day coding, instead of just that one hour.]]></summary></entry><entry><title type="html">Day 0, Tuple Basics</title><link href="https://notfiles.xyz/2018/11/30/day-0-tuple-basics/" rel="alternate" type="text/html" title="Day 0, Tuple Basics" /><published>2018-11-30T19:52:17+01:00</published><updated>2018-11-30T19:52:17+01:00</updated><id>https://notfiles.xyz/2018/11/30/day-0-tuple-basics</id><content type="html" xml:base="https://notfiles.xyz/2018/11/30/day-0-tuple-basics/"><![CDATA[<p>Oops, I started a day early.</p>

<p>So, this book really builds from the bottom, starting out by defining a basic 4D tuple <code class="language-plaintext highlighter-rouge">(x,y,z,w)</code>, and a neat trick for representing 3D points and vectors by storing a magic value in the <code class="language-plaintext highlighter-rouge">w</code> component. To keep with that intent, and to refresh my <a href="https://en.wikipedia.org/wiki/Linear_algebra">linear algebra</a> skills, I’ll pretend the <code class="language-plaintext highlighter-rouge">matrix</code> package in Ruby stdlib doesn’t exist, and build everything from scratch.</p>

<p>Pushed to <a href="https://github.com/notCalle/glistening_ruby">GitHub</a>, and done for the day.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="ruby" /><category term="algebra" /><category term="hourofcode" /><category term="raytracerchallenge" /><summary type="html"><![CDATA[Oops, I started a day early.]]></summary></entry><entry><title type="html">Devember is Coming</title><link href="https://notfiles.xyz/2018/11/29/devember-is-coming/" rel="alternate" type="text/html" title="Devember is Coming" /><published>2018-11-29T23:33:52+01:00</published><updated>2018-11-29T23:33:52+01:00</updated><id>https://notfiles.xyz/2018/11/29/devember-is-coming</id><content type="html" xml:base="https://notfiles.xyz/2018/11/29/devember-is-coming/"><![CDATA[<p>It’s that time of the year again.</p>

<p>I, <em>Calle Englund</em>, will participate to the next <a href="https://devember.org">Devember</a>. My Devember will be <a href="https://raytracerchallenge.com">The Raytracer Challenge</a>. I promise I will program for my Devember for at least an hour, every day of the next December. I will also write a daily public devlog and will make the produced code publicly available on the internet. No matter what, I will keep my promise.</p>

<p>“The Raytracer Challenge”, is a book about building a raytracer, from scratch, using a fully test driven methodology. The book describes each step in Cucumber features, and the reader conjures test code that verifies each feature, and code that satisfies the tests.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2018" /><category term="hourofcode" /><summary type="html"><![CDATA[It’s that time of the year again.]]></summary></entry><entry><title type="html">Momentum Lost</title><link href="https://notfiles.xyz/2016/12/21/momentum-lost/" rel="alternate" type="text/html" title="Momentum Lost" /><published>2016-12-21T22:08:53+01:00</published><updated>2016-12-21T22:08:53+01:00</updated><id>https://notfiles.xyz/2016/12/21/momentum-lost</id><content type="html" xml:base="https://notfiles.xyz/2016/12/21/momentum-lost/"><![CDATA[<p>All the setbacks and distractions made me lose the momentum I needed to keep going at this thing, despite everything else that exhausts my energy.</p>

<p>Better luck next year, I guess.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2016" /><summary type="html"><![CDATA[All the setbacks and distractions made me lose the momentum I needed to keep going at this thing, despite everything else that exhausts my energy.]]></summary></entry><entry><title type="html">SpriteKit evolved</title><link href="https://notfiles.xyz/2016/12/14/spritekit-evolved/" rel="alternate" type="text/html" title="SpriteKit evolved" /><published>2016-12-14T20:49:34+01:00</published><updated>2016-12-14T20:49:34+01:00</updated><id>https://notfiles.xyz/2016/12/14/spritekit-evolved</id><content type="html" xml:base="https://notfiles.xyz/2016/12/14/spritekit-evolved/"><![CDATA[<p>While poking around, I saw an intriguing class named <code class="language-plaintext highlighter-rouge">SKTileMapNode</code>, and it turns out that <code class="language-plaintext highlighter-rouge">SpriteKit</code> has gained support for rectangular, isometric, and hexagonal tile maps since last year. Looks like I can drop all of the plans for <code class="language-plaintext highlighter-rouge">GridMapKit</code> and just use what’s there in the SDK already. Maybe I’ll still need some of it to implement the plans for hierarchical maps of different scale, e.g. <em>world map</em>, detailed <em>terrain maps</em>, and <em>building/dungeon maps</em>.</p>

<p>Oh, and there is new stuff in <code class="language-plaintext highlighter-rouge">GameplayKit</code> for creating <em>noise maps</em> as well. Almost everything I spent last <em>Devember</em> doing, and that I was planning to port to <em>Swift</em> this time around has since been implemented in the SDK. Time for major replanning, and reading up on documentation instead, to find what else there is that I don’t have to write myself anymore.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2016" /><category term="spritekit" /><summary type="html"><![CDATA[While poking around, I saw an intriguing class named SKTileMapNode, and it turns out that SpriteKit has gained support for rectangular, isometric, and hexagonal tile maps since last year. Looks like I can drop all of the plans for GridMapKit and just use what’s there in the SDK already. Maybe I’ll still need some of it to implement the plans for hierarchical maps of different scale, e.g. world map, detailed terrain maps, and building/dungeon maps.]]></summary></entry><entry><title type="html">Giving up on fancy stuff</title><link href="https://notfiles.xyz/2016/12/13/giving-up-on-fancy-stuff/" rel="alternate" type="text/html" title="Giving up on fancy stuff" /><published>2016-12-13T21:39:18+01:00</published><updated>2016-12-13T21:39:18+01:00</updated><id>https://notfiles.xyz/2016/12/13/giving-up-on-fancy-stuff</id><content type="html" xml:base="https://notfiles.xyz/2016/12/13/giving-up-on-fancy-stuff/"><![CDATA[<p>Another useless day struggling with tools instead of getting actual work done; but for now I’ll just include all the actual code from the framework in the main project and ignore the problems for now. This way I still get the reusable code separeted from the specific code, to get a better start on future projects.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2016" /><category term="xcode" /><category term="swift" /><summary type="html"><![CDATA[Another useless day struggling with tools instead of getting actual work done; but for now I’ll just include all the actual code from the framework in the main project and ignore the problems for now. This way I still get the reusable code separeted from the specific code, to get a better start on future projects.]]></summary></entry><entry><title type="html">Xcode Bug Report</title><link href="https://notfiles.xyz/2016/12/12/xcode-bug-report/" rel="alternate" type="text/html" title="Xcode Bug Report" /><published>2016-12-12T23:51:00+01:00</published><updated>2016-12-12T23:51:00+01:00</updated><id>https://notfiles.xyz/2016/12/12/xcode-bug-report</id><content type="html" xml:base="https://notfiles.xyz/2016/12/12/xcode-bug-report/"><![CDATA[<p>Two days lost in air travel, and today’s session was all about troubleshooting the crashing <em>Swift Playground</em> in <em>Xcode</em>, so nothing useful got done today. Some cosmetic code readability fixes was commited during re-reading everything to try and figure out what could possibly cause the crashes.</p>

<p>Filed a bug report with <em>Apple</em>, so we’ll see what happens with that.</p>

<p>I guess my next step will be to try to use the framework I’ve been worksing on from the actual project, since I currently can’t use the playground to test the things I’m doing.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2016" /><category term="xcode" /><summary type="html"><![CDATA[Two days lost in air travel, and today’s session was all about troubleshooting the crashing Swift Playground in Xcode, so nothing useful got done today. Some cosmetic code readability fixes was commited during re-reading everything to try and figure out what could possibly cause the crashes.]]></summary></entry><entry><title type="html">Path Finding</title><link href="https://notfiles.xyz/2016/12/10/path-finding/" rel="alternate" type="text/html" title="Path Finding" /><published>2016-12-10T05:27:35+01:00</published><updated>2016-12-10T05:27:35+01:00</updated><id>https://notfiles.xyz/2016/12/10/path-finding</id><content type="html" xml:base="https://notfiles.xyz/2016/12/10/path-finding/"><![CDATA[<p>First attempt at using the <code class="language-plaintext highlighter-rouge">GamePlayKit</code> path finding <code class="language-plaintext highlighter-rouge">GKGridGraph</code>. Unfortunately, the playground currently crashes (because of some internal <em>XCode</em> bug maybe?), so it can’t be tested.</p>

<p>The idea is that an actor can move if there is something present on the layer directly below them, but can’t move through layers they occupy themselves. Currently hardcoded as requirement for tiles on <code class="language-plaintext highlighter-rouge">region.layers[0]</code> but this environment evaluation should probably be a method of the actor, as e.g. flying or swimming actors might have other ideas. Also, the graph generation should be restricted to what an actor has actually see, so they can’t figure out a perfect path through unknown terrain.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2016" /><category term="swift" /><category term="xcode" /><summary type="html"><![CDATA[First attempt at using the GamePlayKit path finding GKGridGraph. Unfortunately, the playground currently crashes (because of some internal XCode bug maybe?), so it can’t be tested.]]></summary></entry><entry><title type="html">GameplayKit A*?</title><link href="https://notfiles.xyz/2016/12/08/gameplaykit/" rel="alternate" type="text/html" title="GameplayKit A*?" /><published>2016-12-08T14:25:11+01:00</published><updated>2016-12-08T14:25:11+01:00</updated><id>https://notfiles.xyz/2016/12/08/gameplaykit</id><content type="html" xml:base="https://notfiles.xyz/2016/12/08/gameplaykit/"><![CDATA[<p>Let’s try to use the builtin [A<em>](https://en.wikipedia.org/wiki/A</em>_search_algorithm) in GameplayKit, and see if it works for our current demands.</p>

<p>This reminded me that nothing in the game API:s uses <code class="language-plaintext highlighter-rouge">CGPoint</code>, so everything has been changed to use <code class="language-plaintext highlighter-rouge">vector_int2</code> instead.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2016" /><category term="swift" /><summary type="html"><![CDATA[Let’s try to use the builtin [A](https://en.wikipedia.org/wiki/A_search_algorithm) in GameplayKit, and see if it works for our current demands.]]></summary></entry><entry><title type="html">Directional Navigation</title><link href="https://notfiles.xyz/2016/12/07/directional-navigation/" rel="alternate" type="text/html" title="Directional Navigation" /><published>2016-12-07T14:05:41+01:00</published><updated>2016-12-07T14:05:41+01:00</updated><id>https://notfiles.xyz/2016/12/07/directional-navigation</id><content type="html" xml:base="https://notfiles.xyz/2016/12/07/directional-navigation/"><![CDATA[<p>Prereq work for implementing path finding: eight direction navigation. A tile can find its neighbours within its layer <code class="language-plaintext highlighter-rouge">exit(direction:)</code>. Currently only within a single map region, because we haven’t implemented interregion links yet.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2016" /><category term="swift" /><summary type="html"><![CDATA[Prereq work for implementing path finding: eight direction navigation. A tile can find its neighbours within its layer exit(direction:). Currently only within a single map region, because we haven’t implemented interregion links yet.]]></summary></entry><entry><title type="html">Caching?</title><link href="https://notfiles.xyz/2016/12/06/caching/" rel="alternate" type="text/html" title="Caching?" /><published>2016-12-06T13:55:42+01:00</published><updated>2016-12-06T13:55:42+01:00</updated><id>https://notfiles.xyz/2016/12/06/caching</id><content type="html" xml:base="https://notfiles.xyz/2016/12/06/caching/"><![CDATA[<p>Spent at huge part of the hour today troubleshooting why my API change to an <code class="language-plaintext highlighter-rouge">init</code> method was not being seen by the <em>playground</em>. Weird caching bugs? No; it turns out that <em>XCode</em> was building for <em>target</em> instead of <em>simulator</em>, so the <em>playground</em> didn’t get a rebuilt version of the framework when I hit <em>build</em>. Still don’t know why that changed since last time, but oh well.</p>

<p>After that frustration was cleared I proceeded to learn that <em>Swift</em> has the same semi-dynamic <code class="language-plaintext highlighter-rouge">Array</code> notion as <em>Objective C</em> has, so they need to be properly managed with respect to reserving space and inserting new objects.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2016" /><category term="swift" /><category term="xcode" /><summary type="html"><![CDATA[Spent at huge part of the hour today troubleshooting why my API change to an init method was not being seen by the playground. Weird caching bugs? No; it turns out that XCode was building for target instead of simulator, so the playground didn’t get a rebuilt version of the framework when I hit build. Still don’t know why that changed since last time, but oh well.]]></summary></entry><entry><title type="html">Fail Monday</title><link href="https://notfiles.xyz/2016/12/06/fail-monday/" rel="alternate" type="text/html" title="Fail Monday" /><published>2016-12-06T13:38:00+01:00</published><updated>2016-12-06T13:38:00+01:00</updated><id>https://notfiles.xyz/2016/12/06/fail-monday</id><content type="html" xml:base="https://notfiles.xyz/2016/12/06/fail-monday/"><![CDATA[<p>Yesterday was a <strong>fail</strong> for this project, but I did spend the afternoon writing <em>python</em> code as an assignment in the <a href="https://usenix.org/lisa16">LISA</a> tutorial about <em>Software Defined Networking</em>, so maybe that counts as something? No? Sorry.</p>]]></content><author><name>Calle Englund</name></author><summary type="html"><![CDATA[Yesterday was a fail for this project, but I did spend the afternoon writing python code as an assignment in the LISA tutorial about Software Defined Networking, so maybe that counts as something? No? Sorry.]]></summary></entry><entry><title type="html">Swift First Lesson</title><link href="https://notfiles.xyz/2016/12/04/swift-lesson-one/" rel="alternate" type="text/html" title="Swift First Lesson" /><published>2016-12-04T12:46:59+01:00</published><updated>2016-12-04T12:46:59+01:00</updated><id>https://notfiles.xyz/2016/12/04/swift-lesson-one</id><content type="html" xml:base="https://notfiles.xyz/2016/12/04/swift-lesson-one/"><![CDATA[<p>The first lesson turns out to be about <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AccessControl.html">access control</a>: nothing is <code class="language-plaintext highlighter-rouge">public</code> by default, even classes or their <code class="language-plaintext highlighter-rouge">init</code> methods. With <code class="language-plaintext highlighter-rouge">public</code> access to our classes the playground plays.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2016" /><category term="swift" /><summary type="html"><![CDATA[The first lesson turns out to be about access control: nothing is public by default, even classes or their init methods. With public access to our classes the playground plays.]]></summary></entry><entry><title type="html">Travel Double Day</title><link href="https://notfiles.xyz/2016/12/04/travel-day/" rel="alternate" type="text/html" title="Travel Double Day" /><published>2016-12-04T03:02:54+01:00</published><updated>2016-12-04T03:02:54+01:00</updated><id>https://notfiles.xyz/2016/12/04/travel-day</id><content type="html" xml:base="https://notfiles.xyz/2016/12/04/travel-day/"><![CDATA[<p>This fell apart quickly, as expected, with a friday that began in CET and ends about now in EST, with 12 hours of air travel and such in between. But development evnvironment is now setup on laptop as well, so at least there’s hope for the following days.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2016" /><summary type="html"><![CDATA[This fell apart quickly, as expected, with a friday that began in CET and ends about now in EST, with 12 hours of air travel and such in between. But development evnvironment is now setup on laptop as well, so at least there’s hope for the following days.]]></summary></entry><entry><title type="html">Second of Devember</title><link href="https://notfiles.xyz/2016/12/02/second-of-devember/" rel="alternate" type="text/html" title="Second of Devember" /><published>2016-12-02T17:48:04+01:00</published><updated>2016-12-02T17:48:04+01:00</updated><id>https://notfiles.xyz/2016/12/02/second-of-devember</id><content type="html" xml:base="https://notfiles.xyz/2016/12/02/second-of-devember/"><![CDATA[<p>Trying to sketch some basic structure for possibly hierarchical map definition, and trying (failing) to use a Swift Playground to try the framework code while sketching. The playground can import my framework, but the framework classes are not accessible for some reason. That’s all I got from one hour today.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2016" /><category term="swift" /><category term="xcode" /><summary type="html"><![CDATA[Trying to sketch some basic structure for possibly hierarchical map definition, and trying (failing) to use a Swift Playground to try the framework code while sketching. The playground can import my framework, but the framework classes are not accessible for some reason. That’s all I got from one hour today.]]></summary></entry><entry><title type="html">First of Devember</title><link href="https://notfiles.xyz/2016/12/01/first-of-devember/" rel="alternate" type="text/html" title="First of Devember" /><published>2016-12-01T23:02:17+01:00</published><updated>2016-12-01T23:02:17+01:00</updated><id>https://notfiles.xyz/2016/12/01/first-of-devember</id><content type="html" xml:base="https://notfiles.xyz/2016/12/01/first-of-devember/"><![CDATA[<p>Not a single actual line of code written today, but development environment setup had to take priority. The way to manage Cocoa dependencies seems to be <a href="https://github.com/Carthage/Carthage">Carthage</a>, so lets use that for our first known dependency, namely a new framework that will hold all reusable parts of the map handling and navigation code. <em>Carthage</em> looks somewhat similar to <em>bundler</em> of Ruby fame, so that’s nice.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2016" /><category term="xcode" /><summary type="html"><![CDATA[Not a single actual line of code written today, but development environment setup had to take priority. The way to manage Cocoa dependencies seems to be Carthage, so lets use that for our first known dependency, namely a new framework that will hold all reusable parts of the map handling and navigation code. Carthage looks somewhat similar to bundler of Ruby fame, so that’s nice.]]></summary></entry><entry><title type="html">GPG signed Git with XCode</title><link href="https://notfiles.xyz/2016/11/30/gpg-signed-git-with-xcode/" rel="alternate" type="text/html" title="GPG signed Git with XCode" /><published>2016-11-30T22:12:00+01:00</published><updated>2016-11-30T22:12:00+01:00</updated><id>https://notfiles.xyz/2016/11/30/gpg-signed-git-with-xcode</id><content type="html" xml:base="https://notfiles.xyz/2016/11/30/gpg-signed-git-with-xcode/"><![CDATA[<p>For <a href="https://github.com/saab-simc-admin/">work projects</a> I’ve been working on lately, we have adopted a strict gpg signed commits and tags only policy, so I thought I’d carry that good intention over to private projects as well. Except it turns out that the execution environment in which XCode runs git does not play well with gnupg.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg: cannot open `/dev/tty': Device not configured
</code></pre></div></div>

<p>Searching for solutions got me nothing but “not supported”. So sad. Can’t be.</p>

<script src="https://gist.github.com/notCalle/da9c3c4e6c82381835059dea2422b645.js"> </script>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% git config <span class="nt">--global</span> gpg.program gpg-batch
</code></pre></div></div>

<p>Ta-da! You’re welcome.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="xcode" /><summary type="html"><![CDATA[For work projects I’ve been working on lately, we have adopted a strict gpg signed commits and tags only policy, so I thought I’d carry that good intention over to private projects as well. Except it turns out that the execution environment in which XCode runs git does not play well with gnupg.]]></summary></entry><entry><title type="html">Devember 2016 Contract</title><link href="https://notfiles.xyz/2016/11/30/devember-2016-contract/" rel="alternate" type="text/html" title="Devember 2016 Contract" /><published>2016-11-30T21:15:00+01:00</published><updated>2016-11-30T21:15:00+01:00</updated><id>https://notfiles.xyz/2016/11/30/devember-2016-contract</id><content type="html" xml:base="https://notfiles.xyz/2016/11/30/devember-2016-contract/"><![CDATA[<p>I, <em>Calle Englund</em>, will participate to the next <a href="https://devember.org/">Devember</a>. My Devember will be an iOS CRPG. I promise I will program for my Devember for at least an hour, every day of the next December. I will also write a daily public devlog and will make the produced code publicly available on the internet. No matter what, I will keep my promise.</p>

<p>This will be an excuse for me to learn Swift, and some parts will no doubt be simply porting code from last year´s project, that was written in ObjC. There will be “isometric” tiled environments, some CRPG/Rogue like game play elements and such, but probably not much by way of high fidelity graphics or scripting.</p>

<p>Maintaining this schedule while attending <a href="https://usenix.org/lisa16/">LISA’16</a> will be an additional challenge, so we’ll see how that works out.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2016" /><category term="hourofcode" /><category term="swift" /><summary type="html"><![CDATA[I, Calle Englund, will participate to the next Devember. My Devember will be an iOS CRPG. I promise I will program for my Devember for at least an hour, every day of the next December. I will also write a daily public devlog and will make the produced code publicly available on the internet. No matter what, I will keep my promise.]]></summary></entry><entry><title type="html">Devember 2016 is coming</title><link href="https://notfiles.xyz/2016/10/23/devember-2016-is-coming/" rel="alternate" type="text/html" title="Devember 2016 is coming" /><published>2016-10-23T00:00:00+02:00</published><updated>2016-10-23T00:00:00+02:00</updated><id>https://notfiles.xyz/2016/10/23/devember-2016-is-coming</id><content type="html" xml:base="https://notfiles.xyz/2016/10/23/devember-2016-is-coming/"><![CDATA[<p>It’s time to start planning for this year’s <a href="https://devember.org/">Devember</a>, and try to figure out what to code towards for an hour every day.</p>

<p>One complication this time around is that I might end up going to <a href="https://usenix.org/lisa16">LISA’16</a> during the first third, and might be too busy with everything going on there to keep up with a daily coding routine.</p>

<p>But first thing first: what to do? Probably something game related. A CRPG on iOS maybe, written in Swift?</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="devember" /><category term="devember2016" /><category term="hourofcode" /><summary type="html"><![CDATA[It’s time to start planning for this year’s Devember, and try to figure out what to code towards for an hour every day.]]></summary></entry><entry><title type="html">XCode build number from git</title><link href="https://notfiles.xyz/2016/08/22/xcode-build-number-from-git/" rel="alternate" type="text/html" title="XCode build number from git" /><published>2016-08-22T23:44:14+02:00</published><updated>2016-08-22T23:44:14+02:00</updated><id>https://notfiles.xyz/2016/08/22/xcode-build-number-from-git</id><content type="html" xml:base="https://notfiles.xyz/2016/08/22/xcode-build-number-from-git/"><![CDATA[<p>Add this as a <strong>Run Script Phase</strong> at the end of <strong>Build Phases</strong> in your XCode project to increment your CFBundleVersion as <em>{git commit count}.{uncommitted changes}-{gitrevid}</em>.</p>

<script src="https://gist.github.com/notCalle/af53a0b3ccac6123c8a2d2337a48dc6a.js"> </script>

<p>When the build is made from a cleanly committed git repository the version will be N.0-XXXXXXX. Intermediary test builds will have N.D-XXXXXXX with the size of the diff from the actual committed version as minor.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="xcode" /><summary type="html"><![CDATA[Add this as a Run Script Phase at the end of Build Phases in your XCode project to increment your CFBundleVersion as {git commit count}.{uncommitted changes}-{gitrevid}.]]></summary></entry><entry><title type="html">Migrated to native Jekyll</title><link href="https://notfiles.xyz/2016/08/22/migrated-to-native-jekyll/" rel="alternate" type="text/html" title="Migrated to native Jekyll" /><published>2016-08-22T18:11:37+02:00</published><updated>2016-08-22T18:11:37+02:00</updated><id>https://notfiles.xyz/2016/08/22/migrated-to-native-jekyll</id><content type="html" xml:base="https://notfiles.xyz/2016/08/22/migrated-to-native-jekyll/"><![CDATA[<p>The publishing pipe for this used to involve <a href="https://gohugo.io">Hugo</a>, but I’ve just finished moving  over to <a href="https://jekyllrb.com">Jekyll</a> instead, because I realized that GitHub can do the rendering for me, and the basic MarkDown structure with YAML frontmatter is almost identical. One less cronjob running on the closet server.</p>]]></content><author><name>Calle Englund</name></author><category term="discord" /><summary type="html"><![CDATA[The publishing pipe for this used to involve Hugo, but I’ve just finished moving over to Jekyll instead, because I realized that GitHub can do the rendering for me, and the basic MarkDown structure with YAML frontmatter is almost identical. One less cronjob running on the closet server.]]></summary></entry><entry><title type="html">devember 31st — wrap up?</title><link href="https://notfiles.xyz/2015/12/31/devember31/" rel="alternate" type="text/html" title="devember 31st — wrap up?" /><published>2015-12-31T22:51:06+01:00</published><updated>2015-12-31T22:51:06+01:00</updated><id>https://notfiles.xyz/2015/12/31/devember31</id><content type="html" xml:base="https://notfiles.xyz/2015/12/31/devember31/"><![CDATA[<p>Didn’t quite make the promise of one hour every day, but overshot on the average instead.
It was a fun experiment, and useful brush-up on old skills.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Didn’t quite make the promise of one hour every day, but overshot on the average instead. It was a fun experiment, and useful brush-up on old skills.]]></summary></entry><entry><title type="html">devember 30th — random spawning</title><link href="https://notfiles.xyz/2015/12/30/devember30/" rel="alternate" type="text/html" title="devember 30th — random spawning" /><published>2015-12-30T22:07:06+01:00</published><updated>2015-12-30T22:07:06+01:00</updated><id>https://notfiles.xyz/2015/12/30/devember30</id><content type="html" xml:base="https://notfiles.xyz/2015/12/30/devember30/"><![CDATA[<p>Mobs randomly spawn, and soon becomes way to many for the engine to handle. Need to tune down spawn rate with number of mobs in play to keep the number reasonable.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Mobs randomly spawn, and soon becomes way to many for the engine to handle. Need to tune down spawn rate with number of mobs in play to keep the number reasonable.]]></summary></entry><entry><title type="html">devember 29th — regenerating health bars</title><link href="https://notfiles.xyz/2015/12/29/devember29/" rel="alternate" type="text/html" title="devember 29th — regenerating health bars" /><published>2015-12-29T20:37:57+01:00</published><updated>2015-12-29T20:37:57+01:00</updated><id>https://notfiles.xyz/2015/12/29/devember29</id><content type="html" xml:base="https://notfiles.xyz/2015/12/29/devember29/"><![CDATA[<p>Health slowly regenerates, and health is shown under actor sprites as a green-&gt;red color changing percentage bar vs max health. Randomized result resolution for attacks.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Health slowly regenerates, and health is shown under actor sprites as a green-&gt;red color changing percentage bar vs max health. Randomized result resolution for attacks.]]></summary></entry><entry><title type="html">devember 28th — ruling brains</title><link href="https://notfiles.xyz/2015/12/28/devember28/" rel="alternate" type="text/html" title="devember 28th — ruling brains" /><published>2015-12-28T20:40:10+01:00</published><updated>2015-12-28T20:40:10+01:00</updated><id>https://notfiles.xyz/2015/12/28/devember28</id><content type="html" xml:base="https://notfiles.xyz/2015/12/28/devember28/"><![CDATA[<p>Mob brains now run a RuleSystem to evaluate their options.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Mob brains now run a RuleSystem to evaluate their options.]]></summary></entry><entry><title type="html">devember 27th — brain and body componentized</title><link href="https://notfiles.xyz/2015/12/27/devember27/" rel="alternate" type="text/html" title="devember 27th — brain and body componentized" /><published>2015-12-27T21:16:30+01:00</published><updated>2015-12-27T21:16:30+01:00</updated><id>https://notfiles.xyz/2015/12/27/devember27</id><content type="html" xml:base="https://notfiles.xyz/2015/12/27/devember27/"><![CDATA[<p>Quite a lot more than an hour of code times a few days, but the rearchitecturing is complete. Tomorrow we can move forward again, and create more complex AI behaviours for MobBrains.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Quite a lot more than an hour of code times a few days, but the rearchitecturing is complete. Tomorrow we can move forward again, and create more complex AI behaviours for MobBrains.]]></summary></entry><entry><title type="html">devember 26th — rearchitecturing</title><link href="https://notfiles.xyz/2015/12/26/devember26/" rel="alternate" type="text/html" title="devember 26th — rearchitecturing" /><published>2015-12-26T16:30:23+01:00</published><updated>2015-12-26T16:30:23+01:00</updated><id>https://notfiles.xyz/2015/12/26/devember26</id><content type="html" xml:base="https://notfiles.xyz/2015/12/26/devember26/"><![CDATA[<p>Everything ripped apart and moved around towards the new architecture. Still more work to be done before anything works again, but hopefully it will be worth it.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Everything ripped apart and moved around towards the new architecture. Still more work to be done before anything works again, but hopefully it will be worth it.]]></summary></entry><entry><title type="html">devember 25th — brain and body</title><link href="https://notfiles.xyz/2015/12/25/devember25/" rel="alternate" type="text/html" title="devember 25th — brain and body" /><published>2015-12-25T15:50:27+01:00</published><updated>2015-12-25T15:50:27+01:00</updated><id>https://notfiles.xyz/2015/12/25/devember25</id><content type="html" xml:base="https://notfiles.xyz/2015/12/25/devember25/"><![CDATA[<p>Actor behaviour needs to be more modular, and not hardcoded into the sprite node classes. Let’s try to refactor everything using an Entity–Component architecture instead. This will take a while and break everything.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Actor behaviour needs to be more modular, and not hardcoded into the sprite node classes. Let’s try to refactor everything using an Entity–Component architecture instead. This will take a while and break everything.]]></summary></entry><entry><title type="html">devember 23rd — lethal aggression</title><link href="https://notfiles.xyz/2015/12/23/devember23/" rel="alternate" type="text/html" title="devember 23rd — lethal aggression" /><published>2015-12-23T18:28:16+01:00</published><updated>2015-12-23T18:28:16+01:00</updated><id>https://notfiles.xyz/2015/12/23/devember23</id><content type="html" xml:base="https://notfiles.xyz/2015/12/23/devember23/"><![CDATA[<p>Coding on the train to yule.</p>

<p>If an actor’s health is reduced below 0 it goes to limbo (and gets garbage collected). Also added a basic message console.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Coding on the train to yule.]]></summary></entry><entry><title type="html">devember 22nd — eightway movement</title><link href="https://notfiles.xyz/2015/12/22/devember22/" rel="alternate" type="text/html" title="devember 22nd — eightway movement" /><published>2015-12-22T21:42:57+01:00</published><updated>2015-12-22T21:42:57+01:00</updated><id>https://notfiles.xyz/2015/12/22/devember22</id><content type="html" xml:base="https://notfiles.xyz/2015/12/22/devember22/"><![CDATA[<p>Movement has been extended from four to eight directions. Everything feels much smoother that way. 
WASD is still bound to N-W-S-E. Maybe rotate WASD to NW-SW-SE-NE and extend with QEZX for W-N-S-E?</p>

<p>There are some z-order glitches happening when Actors with a wide base transition from a farther to a closer tile, that I have to look into some other day.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Movement has been extended from four to eight directions. Everything feels much smoother that way. WASD is still bound to N-W-S-E. Maybe rotate WASD to NW-SW-SE-NE and extend with QEZX for W-N-S-E?]]></summary></entry><entry><title type="html">devember 21st — actors are xenophobes</title><link href="https://notfiles.xyz/2015/12/21/devember21/" rel="alternate" type="text/html" title="devember 21st — actors are xenophobes" /><published>2015-12-21T21:59:48+01:00</published><updated>2015-12-21T21:59:48+01:00</updated><id>https://notfiles.xyz/2015/12/21/devember21</id><content type="html" xml:base="https://notfiles.xyz/2015/12/21/devember21/"><![CDATA[<p>An actor that tries to step into a tile where an actor of a different class resides, will attack instead of moving. Actors will remember the last aggressor and (autonomous actors) will try hunt them down.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[An actor that tries to step into a tile where an actor of a different class resides, will attack instead of moving. Actors will remember the last aggressor and (autonomous actors) will try hunt them down.]]></summary></entry><entry><title type="html">devember 20th — curious and cowardly mobs</title><link href="https://notfiles.xyz/2015/12/20/devember20/" rel="alternate" type="text/html" title="devember 20th — curious and cowardly mobs" /><published>2015-12-20T16:34:55+01:00</published><updated>2015-12-20T16:34:55+01:00</updated><id>https://notfiles.xyz/2015/12/20/devember20</id><content type="html" xml:base="https://notfiles.xyz/2015/12/20/devember20/"><![CDATA[<p>Autonomous mobs can roam the lands, and become curious or scared of the player. Perhaps even aggressive, in a near future?</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Autonomous mobs can roam the lands, and become curious or scared of the player. Perhaps even aggressive, in a near future?]]></summary></entry><entry><title type="html">devember 19th — clutter on maps</title><link href="https://notfiles.xyz/2015/12/19/devember19/" rel="alternate" type="text/html" title="devember 19th — clutter on maps" /><published>2015-12-19T22:11:42+01:00</published><updated>2015-12-19T22:11:42+01:00</updated><id>https://notfiles.xyz/2015/12/19/devember19</id><content type="html" xml:base="https://notfiles.xyz/2015/12/19/devember19/"><![CDATA[<p>Map tile classes can now cause random clutter to appear on them, like trees.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Map tile classes can now cause random clutter to appear on them, like trees.]]></summary></entry><entry><title type="html">devember 18th</title><link href="https://notfiles.xyz/2015/12/18/devember18/" rel="alternate" type="text/html" title="devember 18th" /><published>2015-12-18T22:56:59+01:00</published><updated>2015-12-18T22:56:59+01:00</updated><id>https://notfiles.xyz/2015/12/18/devember18</id><content type="html" xml:base="https://notfiles.xyz/2015/12/18/devember18/"><![CDATA[<p>Screen to tile coordinate transform when tiles have different visible height gets complicated.</p>

<p>Refactored tile types into their own classes, so they may become composit with e.g. trees and other clutter on them in the future.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Screen to tile coordinate transform when tiles have different visible height gets complicated.]]></summary></entry><entry><title type="html">devember 17th — smooth actor movement</title><link href="https://notfiles.xyz/2015/12/17/devember17/" rel="alternate" type="text/html" title="devember 17th — smooth actor movement" /><published>2015-12-17T19:30:25+01:00</published><updated>2015-12-17T19:30:25+01:00</updated><id>https://notfiles.xyz/2015/12/17/devember17</id><content type="html" xml:base="https://notfiles.xyz/2015/12/17/devember17/"><![CDATA[<p>Actors will now move smoothly in the X-Y plane, and will find their own paths using the A* path finder. Also been playing a bit with ambient light cycles so there will be day and night, and longer cycles for seasonal variation of the day/night cycle.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Actors will now move smoothly in the X-Y plane, and will find their own paths using the A* path finder. Also been playing a bit with ambient light cycles so there will be day and night, and longer cycles for seasonal variation of the day/night cycle.]]></summary></entry><entry><title type="html">devember 16th — smooth perlin noise</title><link href="https://notfiles.xyz/2015/12/16/devember16/" rel="alternate" type="text/html" title="devember 16th — smooth perlin noise" /><published>2015-12-16T21:37:00+01:00</published><updated>2015-12-16T21:37:00+01:00</updated><id>https://notfiles.xyz/2015/12/16/devember16</id><content type="html" xml:base="https://notfiles.xyz/2015/12/16/devember16/"><![CDATA[<p>Now using perlin noise for smoother random terrain map generation. Need better height map textures.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Now using perlin noise for smoother random terrain map generation. Need better height map textures.]]></summary></entry><entry><title type="html">devember 15th — working A*</title><link href="https://notfiles.xyz/2015/12/15/devember15/" rel="alternate" type="text/html" title="devember 15th — working A*" /><published>2015-12-15T23:14:46+01:00</published><updated>2015-12-15T23:14:46+01:00</updated><id>https://notfiles.xyz/2015/12/15/devember15</id><content type="html" xml:base="https://notfiles.xyz/2015/12/15/devember15/"><![CDATA[<p>Working A*, and decaying debug highlight of search area and best path to selected target tile. TileMap provides the optimistic path cost heuristic, and Actor provides costOfStep between nodes.</p>

<p>Coordinate transform for tile picking is still broken and needs fixing.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><category term="pathfinding" /><summary type="html"><![CDATA[Working A*, and decaying debug highlight of search area and best path to selected target tile. TileMap provides the optimistic path cost heuristic, and Actor provides costOfStep between nodes.]]></summary></entry><entry><title type="html">devember 14th — brave attempt at A*</title><link href="https://notfiles.xyz/2015/12/14/devember14/" rel="alternate" type="text/html" title="devember 14th — brave attempt at A*" /><published>2015-12-14T21:13:29+01:00</published><updated>2015-12-14T21:13:29+01:00</updated><id>https://notfiles.xyz/2015/12/14/devember14</id><content type="html" xml:base="https://notfiles.xyz/2015/12/14/devember14/"><![CDATA[<p>A possibly completely broken attempt at A<em>, and it took hours — not *an</em> hour.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[A possibly completely broken attempt at A, and it took hours — not *an hour.]]></summary></entry><entry><title type="html">devember 13th — pathfinding</title><link href="https://notfiles.xyz/2015/12/13/devember13/" rel="alternate" type="text/html" title="devember 13th — pathfinding" /><published>2015-12-13T17:04:39+01:00</published><updated>2015-12-13T17:04:39+01:00</updated><id>https://notfiles.xyz/2015/12/13/devember13</id><content type="html" xml:base="https://notfiles.xyz/2015/12/13/devember13/"><![CDATA[<p>I’m a bad bad slacker person, and didn’t keep my daily hour of code promise for two consecutive days. I did however read a bit on using Perlin Noise for prettier randomness, so that’ll be a thing when I have my pathfinding sorted.</p>

<p>It turns out that GameKit’s builtin GKGridGraph pathfinding is not really useful for my ideas about varying cost or blockage between grid nodes, so I will probably need to throw that out and replace by my own A* graph search. Started that transition by refactoring all search related code into its own class.</p>

<p>Somewhere down the line I have broken the screen to grid coordinate transform. Maybe unit tests are in order.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[I’m a bad bad slacker person, and didn’t keep my daily hour of code promise for two consecutive days. I did however read a bit on using Perlin Noise for prettier randomness, so that’ll be a thing when I have my pathfinding sorted.]]></summary></entry><entry><title type="html">devember 10th — pretty randomness is hard</title><link href="https://notfiles.xyz/2015/12/10/devember10/" rel="alternate" type="text/html" title="devember 10th — pretty randomness is hard" /><published>2015-12-10T22:05:02+01:00</published><updated>2015-12-10T22:05:02+01:00</updated><id>https://notfiles.xyz/2015/12/10/devember10</id><content type="html" xml:base="https://notfiles.xyz/2015/12/10/devember10/"><![CDATA[<p>Making randomness look pretty is hard, so I’ll put that on the shelf for now. Started looking at GameKit’s Graph pathfinding classes instead, which is probably more essential than getting sidetracked by making things look pretty. Defining the GridGraph at the IsoTileMap level will probably not work though, as different Actors will have their own unique capabilities to traverse the map. The Actor should probably generate their own GridGraph for their observable vicinity when they need it, and filter the graph with their traversal capabilities.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><category term="pathfinding" /><summary type="html"><![CDATA[Making randomness look pretty is hard, so I’ll put that on the shelf for now. Started looking at GameKit’s Graph pathfinding classes instead, which is probably more essential than getting sidetracked by making things look pretty. Defining the GridGraph at the IsoTileMap level will probably not work though, as different Actors will have their own unique capabilities to traverse the map. The Actor should probably generate their own GridGraph for their observable vicinity when they need it, and filter the graph with their traversal capabilities.]]></summary></entry><entry><title type="html">devember 9th — smooth autocentering camera</title><link href="https://notfiles.xyz/2015/12/10/devember09/" rel="alternate" type="text/html" title="devember 9th — smooth autocentering camera" /><published>2015-12-10T00:02:06+01:00</published><updated>2015-12-10T00:02:06+01:00</updated><id>https://notfiles.xyz/2015/12/10/devember09</id><content type="html" xml:base="https://notfiles.xyz/2015/12/10/devember09/"><![CDATA[<p>Camera smoothly centers on player position.</p>

<p>Trying to create autofiltering for bordertiles between two kinds, e.g. banks between water and grass tiles, but messed up the logic somewhere, causing a huge mess. Also for way more than one hour, causing past midnight.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Camera smoothly centers on player position.]]></summary></entry><entry><title type="html">devember 8th — randomized maps</title><link href="https://notfiles.xyz/2015/12/08/devember08/" rel="alternate" type="text/html" title="devember 8th — randomized maps" /><published>2015-12-08T23:48:11+01:00</published><updated>2015-12-08T23:48:11+01:00</updated><id>https://notfiles.xyz/2015/12/08/devember08</id><content type="html" xml:base="https://notfiles.xyz/2015/12/08/devember08/"><![CDATA[<p>Refactored lots of tile related stuff, so the tile templates can hold more information than just a texture image name, e.g. the stepHeight for a tile, so we can have tiles that are not perfectly flat, but still be walkable and have actors positioned correctly.</p>

<p>Loaded some [https://opengameart.org/] tile artwork to get something to work with for randomized map generation.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><category term="opengameart" /><summary type="html"><![CDATA[Refactored lots of tile related stuff, so the tile templates can hold more information than just a texture image name, e.g. the stepHeight for a tile, so we can have tiles that are not perfectly flat, but still be walkable and have actors positioned correctly.]]></summary></entry><entry><title type="html">devember 7th — actors walk on top of map tiles</title><link href="https://notfiles.xyz/2015/12/07/devember07/" rel="alternate" type="text/html" title="devember 7th — actors walk on top of map tiles" /><published>2015-12-07T21:37:58+01:00</published><updated>2015-12-07T21:37:58+01:00</updated><id>https://notfiles.xyz/2015/12/07/devember07</id><content type="html" xml:base="https://notfiles.xyz/2015/12/07/devember07/"><![CDATA[<p>Refactored movement from Player* to new superclass ActorSpriteNode.</p>

<p>Actors will now stand on top of map tiles (with the assumption that the top surface is the isometric bounding box for the tile). No more walking inside walls and such ghostly nonsense.</p>

<p>Actors has a limited step height that they can reach when moving, and can’t move between tiles with greater height difference (as measured in base tile halfwidth). This should probably be replaced with an ActionPoint cost function of step height in the future.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Refactored movement from Player* to new superclass ActorSpriteNode.]]></summary></entry><entry><title type="html">devember 6th</title><link href="https://notfiles.xyz/2015/12/06/devember06/" rel="alternate" type="text/html" title="devember 6th" /><published>2015-12-06T17:15:14+01:00</published><updated>2015-12-06T17:15:14+01:00</updated><id>https://notfiles.xyz/2015/12/06/devember06</id><content type="html" xml:base="https://notfiles.xyz/2015/12/06/devember06/"><![CDATA[<p>Lighting broke yesterday because initialization code was moved into the wrong place. Sigh. Now we have working scene lighting again.</p>

<p>Redone sprite node classes to inherit from our own base ITSpriteNode instead of SKSpriteNode, so common IsoTile logic can be added there. For now there are north/south/west/east relations to neighboring tiles on the map, and objects placed on the map can simply ask their parent tile for directions when then want to move around.</p>

<p>I’ll probably need to refactor some generic ActorSpriteNode code out of PlayerSpriteNode when the need to add AI actors to the scene arises.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Lighting broke yesterday because initialization code was moved into the wrong place. Sigh. Now we have working scene lighting again.]]></summary></entry><entry><title type="html">devember 5th</title><link href="https://notfiles.xyz/2015/12/05/devember05/" rel="alternate" type="text/html" title="devember 5th" /><published>2015-12-05T10:34:56+01:00</published><updated>2015-12-05T10:34:56+01:00</updated><id>https://notfiles.xyz/2015/12/05/devember05</id><content type="html" xml:base="https://notfiles.xyz/2015/12/05/devember05/"><![CDATA[<p>Coding on the train today. WASD movement and simple dynamic lighting.
For some reason lighting broke when making more sane spritenode tree structure.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Coding on the train today. WASD movement and simple dynamic lighting. For some reason lighting broke when making more sane spritenode tree structure.]]></summary></entry><entry><title type="html">devember 4th</title><link href="https://notfiles.xyz/2015/12/05/devember04/" rel="alternate" type="text/html" title="devember 4th" /><published>2015-12-05T00:00:59+01:00</published><updated>2015-12-05T00:00:59+01:00</updated><id>https://notfiles.xyz/2015/12/05/devember04</id><content type="html" xml:base="https://notfiles.xyz/2015/12/05/devember04/"><![CDATA[<p>Support for layered sprites on base tiles, for dynamic objects being displayed on top of floor tiles. Click to teleport player sprite to a tile.</p>

<p>Coding while drunk is hard.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Support for layered sprites on base tiles, for dynamic objects being displayed on top of floor tiles. Click to teleport player sprite to a tile.]]></summary></entry><entry><title type="html">devember 3rd</title><link href="https://notfiles.xyz/2015/12/03/devember03/" rel="alternate" type="text/html" title="devember 3rd" /><published>2015-12-03T22:00:45+01:00</published><updated>2015-12-03T22:00:45+01:00</updated><id>https://notfiles.xyz/2015/12/03/devember03</id><content type="html" xml:base="https://notfiles.xyz/2015/12/03/devember03/"><![CDATA[<p>Isometric coordinate transforms between tile grid positions and screen space sorted out. We can now display a z-sorted grid of floor tiles on screen, and pick tiles in the grid via screen coordinates.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Isometric coordinate transforms between tile grid positions and screen space sorted out. We can now display a z-sorted grid of floor tiles on screen, and pick tiles in the grid via screen coordinates.]]></summary></entry><entry><title type="html">devember 2nd</title><link href="https://notfiles.xyz/2015/12/02/devember02/" rel="alternate" type="text/html" title="devember 2nd" /><published>2015-12-02T21:30:46+01:00</published><updated>2015-12-02T21:30:46+01:00</updated><id>https://notfiles.xyz/2015/12/02/devember02</id><content type="html" xml:base="https://notfiles.xyz/2015/12/02/devember02/"><![CDATA[<p>Restructured most code from yesterday. Primitive tilemap setup.</p>]]></content><author><name>Calle Englund</name></author><category term="devlog" /><category term="gamedev" /><category term="devember" /><category term="devember2015" /><category term="hourofcode" /><category term="objc" /><category term="spritekit" /><category term="isometric" /><summary type="html"><![CDATA[Restructured most code from yesterday. Primitive tilemap setup.]]></summary></entry></feed>